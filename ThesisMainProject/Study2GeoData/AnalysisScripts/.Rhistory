infoDf <- temp
infoDf <- data.frame(matrix(ncol = 27,nrow = 6))
cases <- c("KOR","MON","COL","SWI", "GRE", "BOT")
for (x in 1:length(cases))
{
caseSel <- temp[grepl(cases[x], rownames(temp)),]
for (y in 1:(ncol(caseSel)-1))
{
infoDf[x,y] <- max(replace(caseSel[,y], caseSel[,y] == 0, NA),na.rm=TRUE)
}
}
rownames(infoDf) <- cases
# Just Information that was sought
# temp$meanValue <- rowMeans(replace(temp, temp == 0, NA),na.rm = TRUE)
pptMeans <- c()
group <- c()
value <- c()
for (ppt in 1:88)
{
pptTrials <- temp[grepl(paste("p",ppt,"-a",sep=""), rownames(temp), ignore.case = FALSE),]
pptMeans[ppt] <- mean(pptTrials$infoValue,na.rm=TRUE)
if (classifyVar == "confidence")
{
group[ppt] <- infoSeekingFullMatrix[grepl(paste("p",ppt,"-a",sep=""), rownames(infoSeekingFullMatrix), ignore.case = FALSE),]$ConfidenceGroup[1]
value[ppt] <- infoSeekingFullMatrix[grepl(paste("p",ppt,"-a",sep=""), rownames(infoSeekingFullMatrix), ignore.case = FALSE),]$ConfidenceScore[1]
} else if (classifyVar == "accuracy") {
group[ppt] <- infoSeekingFullMatrix[grepl(paste("p",ppt,"-a",sep=""), rownames(infoSeekingFullMatrix), ignore.case = FALSE),]$AccuracyGroup[1]
value[ppt] <- infoSeekingFullMatrix[grepl(paste("p",ppt,"-a",sep=""), rownames(infoSeekingFullMatrix), ignore.case = FALSE),]$AccuracyScore[1]
} else {
group[ppt] <- infoSeekingFullMatrix[grepl(paste("p",ppt,"-a",sep=""), rownames(infoSeekingFullMatrix), ignore.case = FALSE),]$GeoKnowledgeGroup[1]
value[ppt] <- infoSeekingFullMatrix[grepl(paste("p",ppt,"-a",sep=""), rownames(infoSeekingFullMatrix), ignore.case = FALSE),]$GeoKnowledgeScore[1]
}
}
accGroupInfoDf <- data.frame(pptMeans,group,value)
accDfMeans <- c(mean(accGroupInfoDf[accGroupInfoDf$group==1,]$pptMeans),
mean(accGroupInfoDf[accGroupInfoDf$group==2,]$pptMeans),
mean(accGroupInfoDf[accGroupInfoDf$group==3,]$pptMeans),
mean(accGroupInfoDf[accGroupInfoDf$group==4,]$pptMeans))
accDfSds <- c(sd(accGroupInfoDf[accGroupInfoDf$group==1,]$pptMeans)/sqrt(nrow(accGroupInfoDf[accGroupInfoDf$group==1,])),
sd(accGroupInfoDf[accGroupInfoDf$group==2,]$pptMeans)/sqrt(nrow(accGroupInfoDf[accGroupInfoDf$group==2,])),
sd(accGroupInfoDf[accGroupInfoDf$group==3,]$pptMeans)/sqrt(nrow(accGroupInfoDf[accGroupInfoDf$group==3,])),
sd(accGroupInfoDf[accGroupInfoDf$group==4,]$pptMeans)/sqrt(nrow(accGroupInfoDf[accGroupInfoDf$group==4,])))
accGroupNum <- c(1,2,3,4)
varDf <-data.frame(accGroupNum, accDfMeans,accDfSds)
p <- ggplot(varDf) +
geom_bar(aes(x = accGroupNum, y = accDfMeans),stat="identity",fill="skyblue",alpha=0.7) +
geom_errorbar(aes(x = accGroupNum,ymin=accDfMeans-accDfSds, ymax=accDfMeans+accDfSds), width=.2, position=position_dodge(0.05),color="orange") +
labs(title="Sum of Information Value",x="Accuracy Group (Quantiles)",y="Total Information Value Sought") +
theme_classic() +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
plot.title=element_text(size=18,face="bold"),
line = element_blank())
print(p)
lmvar <- lm(accDfMeans~accGroupNum, data = varDf)
pptMeans <- c()
group <- c()
value <- c()
for (ppt in 1:88)
{
pptTrials <- temp[grepl(paste("p",ppt,"-a",sep=""), rownames(temp), ignore.case = FALSE),]
pptMeans[ppt] <- mean(pptTrials$infoValue,na.rm=TRUE)
if (classifyVar == "confidence")
{
group[ppt] <- infoSeekingFullMatrix[grepl(paste("p",ppt,"-a",sep=""), rownames(infoSeekingFullMatrix), ignore.case = FALSE),]$ConfidenceGroup[1]
value[ppt] <- infoSeekingFullMatrix[grepl(paste("p",ppt,"-a",sep=""), rownames(infoSeekingFullMatrix), ignore.case = FALSE),]$ConfidenceScore[1]
} else if (classifyVar == "accuracy") {
group[ppt] <- infoSeekingFullMatrix[grepl(paste("p",ppt,"-a",sep=""), rownames(infoSeekingFullMatrix), ignore.case = FALSE),]$AccuracyGroup[1]
value[ppt] <- infoSeekingFullMatrix[grepl(paste("p",ppt,"-a",sep=""), rownames(infoSeekingFullMatrix), ignore.case = FALSE),]$AccuracyScore[1]
} else {
group[ppt] <- infoSeekingFullMatrix[grepl(paste("p",ppt,"-a",sep=""), rownames(infoSeekingFullMatrix), ignore.case = FALSE),]$GeoKnowledgeGroup[1]
value[ppt] <- infoSeekingFullMatrix[grepl(paste("p",ppt,"-a",sep=""), rownames(infoSeekingFullMatrix), ignore.case = FALSE),]$GeoKnowledgeScore[1]
}
}
accGroupInfoDf <- data.frame(pptMeans,group,value)
accDfMeans <- c(mean(accGroupInfoDf[accGroupInfoDf$group==1,]$pptMeans),
mean(accGroupInfoDf[accGroupInfoDf$group==2,]$pptMeans),
mean(accGroupInfoDf[accGroupInfoDf$group==3,]$pptMeans),
mean(accGroupInfoDf[accGroupInfoDf$group==4,]$pptMeans))
accDfSds <- c(sd(accGroupInfoDf[accGroupInfoDf$group==1,]$pptMeans)/sqrt(nrow(accGroupInfoDf[accGroupInfoDf$group==1,])),
sd(accGroupInfoDf[accGroupInfoDf$group==2,]$pptMeans)/sqrt(nrow(accGroupInfoDf[accGroupInfoDf$group==2,])),
sd(accGroupInfoDf[accGroupInfoDf$group==3,]$pptMeans)/sqrt(nrow(accGroupInfoDf[accGroupInfoDf$group==3,])),
sd(accGroupInfoDf[accGroupInfoDf$group==4,]$pptMeans)/sqrt(nrow(accGroupInfoDf[accGroupInfoDf$group==4,])))
accGroupNum <- c(1,2,3,4)
varDf <-data.frame(accGroupNum, accDfMeans,accDfSds)
varDf
accGroupInfoDf
pptTrials
View(temp)
pptMeans <- c()
group <- c()
value <- c()
for (ppt in 1:88)
{
pptTrials <- temp[grepl(paste("p",ppt,"-g",sep=""), rownames(temp), ignore.case = FALSE),]
pptMeans[ppt] <- mean(pptTrials$infoValue,na.rm=TRUE)
if (classifyVar == "confidence")
{
group[ppt] <- infoSeekingFullMatrix[grepl(paste("p",ppt,"-g",sep=""), rownames(infoSeekingFullMatrix), ignore.case = FALSE),]$ConfidenceGroup[1]
value[ppt] <- infoSeekingFullMatrix[grepl(paste("p",ppt,"-g",sep=""), rownames(infoSeekingFullMatrix), ignore.case = FALSE),]$ConfidenceScore[1]
} else if (classifyVar == "accuracy") {
group[ppt] <- infoSeekingFullMatrix[grepl(paste("p",ppt,"-g",sep=""), rownames(infoSeekingFullMatrix), ignore.case = FALSE),]$AccuracyGroup[1]
value[ppt] <- infoSeekingFullMatrix[grepl(paste("p",ppt,"-g",sep=""), rownames(infoSeekingFullMatrix), ignore.case = FALSE),]$AccuracyScore[1]
} else {
group[ppt] <- infoSeekingFullMatrix[grepl(paste("p",ppt,"-g",sep=""), rownames(infoSeekingFullMatrix), ignore.case = FALSE),]$GeoKnowledgeGroup[1]
value[ppt] <- infoSeekingFullMatrix[grepl(paste("p",ppt,"-g",sep=""), rownames(infoSeekingFullMatrix), ignore.case = FALSE),]$GeoKnowledgeScore[1]
}
}
accGroupInfoDf <- data.frame(pptMeans,group,value)
accDfMeans <- c(mean(accGroupInfoDf[accGroupInfoDf$group==1,]$pptMeans),
mean(accGroupInfoDf[accGroupInfoDf$group==2,]$pptMeans),
mean(accGroupInfoDf[accGroupInfoDf$group==3,]$pptMeans),
mean(accGroupInfoDf[accGroupInfoDf$group==4,]$pptMeans))
accDfSds <- c(sd(accGroupInfoDf[accGroupInfoDf$group==1,]$pptMeans)/sqrt(nrow(accGroupInfoDf[accGroupInfoDf$group==1,])),
sd(accGroupInfoDf[accGroupInfoDf$group==2,]$pptMeans)/sqrt(nrow(accGroupInfoDf[accGroupInfoDf$group==2,])),
sd(accGroupInfoDf[accGroupInfoDf$group==3,]$pptMeans)/sqrt(nrow(accGroupInfoDf[accGroupInfoDf$group==3,])),
sd(accGroupInfoDf[accGroupInfoDf$group==4,]$pptMeans)/sqrt(nrow(accGroupInfoDf[accGroupInfoDf$group==4,])))
accGroupNum <- c(1,2,3,4)
varDf <-data.frame(accGroupNum, accDfMeans,accDfSds)
p <- ggplot(varDf) +
geom_bar(aes(x = accGroupNum, y = accDfMeans),stat="identity",fill="skyblue",alpha=0.7) +
geom_errorbar(aes(x = accGroupNum,ymin=accDfMeans-accDfSds, ymax=accDfMeans+accDfSds), width=.2, position=position_dodge(0.05),color="orange") +
labs(title="Sum of Information Value",x="Accuracy Group (Quantiles)",y="Total Information Value Sought") +
theme_classic() +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
plot.title=element_text(size=18,face="bold"),
line = element_blank())
print(p)
lmvar <- lm(accDfMeans~accGroupNum, data = varDf)
summary(lmvar)
# Continuous
cor <- cor.test(accGroupInfoDf$value,accGroupInfoDf$pptMeans,method="pearson")
diffCon <- ggplot(data = accGroupInfoDf, aes(x=value, y=pptMeans)) +
geom_point() +
geom_smooth(method=lm , color=accuracyColour, fill="#69b3a2", se=TRUE) +
theme_classic()
# Colour coding for figures
confidenceColour <- "#03c200"
difficultyColour <- "#bf00c2"
infoSeekingColour <- "#ca0600"
differentialColour <- "skyblue"
likelihoodColour <- "orange"
accuracyColour <- "black"
resolutionColour <- "yellow"
# Continuous
cor <- cor.test(accGroupInfoDf$value,accGroupInfoDf$pptMeans,method="pearson")
diffCon <- ggplot(data = accGroupInfoDf, aes(x=value, y=pptMeans)) +
geom_point() +
geom_smooth(method=lm , color=accuracyColour, fill="#69b3a2", se=TRUE) +
theme_classic()
title <- paste("Participant ", classifyVar ,"/ Info Value: ",
"r(", cor$parameter, ") = ",  round(cor$estimate, 2), ", p = ",  round(cor$p.value,2), sep="")
print(diffCon +
ggtitle(title)
+ labs(y="Information Value", x = paste("Participant ", classifyVar, sep=""))
+theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
plot.title=element_text(size=14,face="bold")
))
infoSeekingProps <- data.frame(matrix(ncol=29,nrow =4))
for (accG in 1:4)
{
infoValueTable <- infoSeekingFullMatrix[,1:29]
setStr <- ""
if (classifyVar == "confidence")
{
setStr <- "conf"
} else if (classifyVar == "accuracy")  {
setStr <- "acc"
} else {
setStr <- "geoKnowledge"
}
infoValueTable <- infoValueTable[grepl(paste(setStr, "Group", accG, sep=""), rownames(infoValueTable)),]
infoSeekingProps[accG,] <- colMeans(infoValueTable)
rownames(infoSeekingProps)[accG] <- paste("accGroup", accG, sep="")
}
colnames(infoSeekingProps) <- c("T1",  "T2",  "T3", "T4", "T5", "T6",
"T7",  "T8",  "T9", "T10", "T11", "T12", "T13", "T14",
"T15", "T16", "T17", "T18", "T19", "T20", "T21", "T22",
"T23", "T24", "T25", "T26", "T27", "T28", "T29")
infoPropValues <- as.array(c(sort(infoSeekingProps[1,],decreasing=TRUE),sort(infoSeekingProps[2,],decreasing=TRUE),sort(infoSeekingProps[3,],decreasing=TRUE),sort(infoSeekingProps[4,],decreasing=TRUE)))
repN <- ncol(infoSeekingProps)
accGroupL <- c(rep(1, repN),rep(2, repN),rep(3, repN),rep(4, repN))
tests <- c(colnames(sort(infoSeekingProps[1,],decreasing=TRUE)),
colnames(sort(infoSeekingProps[2,],decreasing=TRUE)),
colnames(sort(infoSeekingProps[3,],decreasing=TRUE)),
colnames(sort(infoSeekingProps[4,],decreasing=TRUE)))
ranks <- c(rep(c(1:repN),4))
infoPropDf <- data.frame(infoPropValues,accGroupL,tests,ranks)
testCodes <- c("AREA", "BORD", "WATER", "UTC", "FORE", "TEMP", "LANDL",
"ANIM", "HIGH", "RAIN", "GDP", "FOOD", "MONAR",
"PM", "HAPPI", "DEMO", "PASSP", "OECD", "GINI", "POPO", "POPC",
"OLYM", "UNEM", "POPDE", "FLAG", "SIDE", "INTE", "FIFA", "RELIG")
for (testNum in 1:29)
{
testStr <- paste("T", testNum, sep="")
infoPropDf[infoPropDf$tests==testStr,]$tests <- testCodes[testNum]
}
ggplot(infoPropDf, aes(x = as.numeric(accGroupL), y = as.double(infoPropValues), fill = tests, group=ranks)) +
geom_bar(position="dodge", stat="identity") +
#scale_fill_viridis(discrete=T) +
geom_text(aes(label = tests),position = position_dodge(0.9), size = 2, angle = 90, hjust = 1) +
labs(y="Information Seeking Proportion", x = paste("Participant ", classifyVar, sep=""))
View(infoSeekingFullMatrix)
infoSeekingProps <- data.frame(matrix(ncol=29,nrow =4))
for (accG in 1:4)
{
infoValueTable <- infoSeekingFullMatrix[,1:29]
setStr <- ""
if (classifyVar == "confidence")
{
setStr <- "conf"
} else if (classifyVar == "accuracy")  {
setStr <- "acc"
} else {
setStr <- "geoKnowledge"
}
infoValueTable <- infoValueTable[grepl(paste(setStr, "Group", accG, sep=""), rownames(infoValueTable)),]
infoSeekingProps[accG,] <- colMeans(infoValueTable)
rownames(infoSeekingProps)[accG] <- paste("accGroup", accG, sep="")
}
colnames(infoSeekingProps) <- c("T1",  "T2",  "T3", "T4", "T5", "T6",
"T7",  "T8",  "T9", "T10", "T11", "T12", "T13", "T14",
"T15", "T16", "T17", "T18", "T19", "T20", "T21", "T22",
"T23", "T24", "T25", "T26", "T27", "T28", "T29")
infoPropValues <- as.array(c(sort(infoSeekingProps[1,],decreasing=TRUE),sort(infoSeekingProps[2,],decreasing=TRUE),sort(infoSeekingProps[3,],decreasing=TRUE),sort(infoSeekingProps[4,],decreasing=TRUE)))
repN <- ncol(infoSeekingProps)
accGroupL <- c(rep(1, repN),rep(2, repN),rep(3, repN),rep(4, repN))
tests <- c(colnames(sort(infoSeekingProps[1,],decreasing=TRUE)),
colnames(sort(infoSeekingProps[2,],decreasing=TRUE)),
colnames(sort(infoSeekingProps[3,],decreasing=TRUE)),
colnames(sort(infoSeekingProps[4,],decreasing=TRUE)))
ranks <- c(rep(c(1:repN),4))
infoPropDf <- data.frame(infoPropValues,accGroupL,tests,ranks)
testCodes <- c("AREA", "BORD", "WATER", "UTC", "FORE", "TEMP", "LANDL",
"ANIM", "HIGH", "RAIN", "GDP", "FOOD", "MONAR",
"PM", "HAPPI", "DEMO", "PASSP", "OECD", "GINI", "POPO", "POPC",
"OLYM", "UNEM", "POPDE", "FLAG", "SIDE", "INTE", "FIFA", "RELIG")
for (testNum in 1:29)
{
testStr <- paste("T", testNum, sep="")
infoPropDf[infoPropDf$tests==testStr,]$tests <- testCodes[testNum]
}
ggplot(infoPropDf, aes(x = as.numeric(accGroupL), y = as.double(infoPropValues), fill = tests, group=ranks)) +
geom_bar(position="dodge", stat="identity") +
#scale_fill_viridis(discrete=T) +
geom_text(aes(label = tests),position = position_dodge(0.9), size = 2, angle = 90, hjust = 1) +
labs(y="Information Seeking Proportion", x = paste("Participant ", classifyVar, sep=""))
p <- ggplot(varDf) +
geom_bar(aes(x = accGroupNum, y = accDfMeans),stat="identity",fill="black",alpha=0.7) +
geom_errorbar(aes(x = accGroupNum,ymin=accDfMeans-accDfSds, ymax=accDfMeans+accDfSds), width=.2, position=position_dodge(0.05),color="orange") +
labs(title="Mean of Information Value",x=paste(classifyVar, " Group (Quantiles)", sep=""),y="Mean Information Value Sought") +
theme_classic() +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
plot.title=element_text(size=18,face="bold"),
line = element_blank())
print(p)
cor <- cor.test(aggData$proportionOfInfo,aggData$meanConfidenceOverallChange,method="pearson")
diffCon <- ggplot(data = aggData, aes(x=proportionOfInfo, y=meanConfidenceOverallChange)) +
geom_point() +
geom_smooth(method=lm , color=infoSeekingColour, fill="#69b3a2", se=TRUE) +
theme_classic()
title <- paste("Information Seeking Proportion against Change in Confidence: ",
"r(", cor$parameter, ") = ",  round(cor$estimate, 2), ", p = ",  round(cor$p.value,2), sep="")
print(diffCon +
ggtitle(title)
+ labs(y="Confidence Change (Final Confidence - Initial Confidence)", x = "Proportion of Available Information Sought")
+theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
plot.title=element_text(size=14,face="bold")
))
print(diffCon +
ggtitle(title)
+ labs(y="Confidence Change (Final Confidence - Initial Confidence)", x = "Proportion of Available Information Sought")
+theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
plot.title=element_text(size=16,face="bold")
))
cor <- cor.test(infoSeekingDf$MDSDistanceVariance,infoSeekingDf$Accuracy,method="pearson")
distanceVars <- c()
infoProps <- c()
accuracies <- c()
confidences <- c()
knowledge <- c()
for (n in 1:nrow(aggData))
{
ppt <- paste("p", n, sep="")
compareColumns <- distances[grep(ppt, rownames(distances)), ]
compareColumns <- compareColumns[,grep(ppt, colnames(compareColumns)) ]
distanceVars[n] <- (sd(compareColumns))^2
infoProps[n] <- aggData$proportionOfInfo[n]
accuracies[n] <- aggData$meanFinalAccuracy[n]
confidences[n] <- aggData$meanFinalConfidence[n]
knowledge[n] <- aggData$geoScore[n]
}
cor <- cor.test(infoSeekingDf$MDSDistanceVariance,infoSeekingDf$Accuracy,method="pearson")
mds <- infoSeekingFullMatrix[,1:29] %>%
dist() %>%
cmdscale() %>%
as_tibble()
distances <- infoSeekingFullMatrix[,1:29] %>% dist() %>% as.matrix()
infoSeekingFullMatrix$v1 <- mds$V1
infoSeekingFullMatrix$v2 <- mds$V2
cases <- countriesShort
######################################
# Look at information seeking distance variance against proportion
distanceVars <- c()
infoProps <- c()
accuracies <- c()
confidences <- c()
knowledge <- c()
for (n in 1:nrow(aggData))
{
ppt <- paste("p", n, sep="")
compareColumns <- distances[grep(ppt, rownames(distances)), ]
compareColumns <- compareColumns[,grep(ppt, colnames(compareColumns)) ]
distanceVars[n] <- (sd(compareColumns))^2
infoProps[n] <- aggData$proportionOfInfo[n]
accuracies[n] <- aggData$meanFinalAccuracy[n]
confidences[n] <- aggData$meanFinalConfidence[n]
knowledge[n] <- aggData$geoScore[n]
}
infoSeekingDf <- data.frame(distanceVars,infoProps,accuracies,confidences,knowledge)
colnames(infoSeekingDf) <- c("MDSDistanceVariance", "InformationSeekingProportion","Accuracy","Confidence","GeoScore")
cor <- cor.test(infoSeekingDf$MDSDistanceVariance,infoSeekingDf$Accuracy,method="pearson")
msdAcc <- ggplot(data = infoSeekingDf, aes(x=MDSDistanceVariance, y=Accuracy)) +
geom_point() +
geom_smooth(method=lm , color=accuracyColour, fill="#69b3a2", se=TRUE) +
theme_classic()
title <- paste("Info Seeking Variance Against Accuracy: ",
"r(", cor$parameter, ") = ",  round(cor$estimate, 2), ", p = ",  round(cor$p.value,2), sep="")
print(msdAcc +
ggtitle(title) +
labs(y="Accuracy", x = "Variance in Information Seeking Across Cases") +
ylim(0,1) +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
plot.title=element_text(size=18,face="bold")))
nPpts <- nrow(infoSeekingDf)/4
varVector <- infoSeekingDf$MDSDistanceVariance
accVector <- c()
if (classifyVar == "confidence")
{
accVector <- infoSeekingDf$Confidence
} else if (classifyVar == "accuracy") {
accVector <- infoSeekingDf$Accuracy
} else {
accVector <- infoSeekingDf$GeoScore
}
quantileAcc <- quantile(accVector)
medAcc <- median(accVector)
accGroups <- ifelse(accVector<quantileAcc[2],1,
ifelse(accVector<quantileAcc[3],2,
ifelse(accVector<quantileAcc[4],3,4))
)
accMedGroups <- ifelse(accVector<medAcc,1,2)
varDfTemp <- data.frame(varVector,accGroups,accMedGroups)
varDfMeans <- c(mean(varDfTemp[varDfTemp$accGroups==1,]$varVector),
mean(varDfTemp[varDfTemp$accGroups==2,]$varVector),
mean(varDfTemp[varDfTemp$accGroups==3,]$varVector),
mean(varDfTemp[varDfTemp$accGroups==4,]$varVector))
varDfSds <- c(sd(varDfTemp[varDfTemp$accGroups==1,]$varVector)/sqrt(nPpts),
sd(varDfTemp[varDfTemp$accGroups==2,]$varVector)/sqrt(nPpts),
sd(varDfTemp[varDfTemp$accGroups==3,]$varVector)/sqrt(nPpts),
sd(varDfTemp[varDfTemp$accGroups==4,]$varVector)/sqrt(nPpts))
accGroupNum <- c(1,2,3,4)
varDf <-data.frame(accGroupNum, varDfMeans,varDfSds)
varMedMeans <- c(mean(varDfTemp[varDfTemp$accMedGroups==1,]$varVector),
mean(varDfTemp[varDfTemp$accMedGroups==2,]$varVector))
varMedSds <- c(sd(varDfTemp[varDfTemp$accMedGroups==1,]$varVector)/sqrt(nPpts),
sd(varDfTemp[varDfTemp$accMedGroups==2,]$varVector)/sqrt(nPpts))
accMedGroupNum <- c(1,2)
varMedDf <-data.frame(accMedGroupNum, varMedMeans,varMedSds)
p <- ggplot(varDf) +
geom_bar(aes(x = accGroupNum, y = varDfMeans),stat="identity",fill="black",alpha=0.7) +
geom_errorbar(aes(x = accGroupNum,ymin=varDfMeans-varDfSds, ymax=varDfMeans+varDfSds), width=.2, position=position_dodge(0.05),color="orange") +
labs(title="Mean of Individual Variance Across Cases",x=paste(classifyVar, " Group (Quantiles)",sep=""),y="Participant Variance Across Cases") +
theme_classic() +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
plot.title=element_text(size=18,face="bold"),
line = element_blank())
print(p)
lmvar <- lm(varVector~accGroups, data = varDfTemp)
print(summary(lmvar))
res.aov2 <- anova_test(data = varDfTemp, dv = varVector, between = accGroups)
antab <- get_anova_table(res.aov2)
print(antab)
infoSeekingProps <- data.frame(matrix(ncol=29,nrow =4))
for (accG in 1:4)
{
infoValueTable <- infoSeekingFullMatrix[,1:29]
setStr <- ""
if (classifyVar == "confidence")
{
setStr <- "conf"
} else if (classifyVar == "accuracy")  {
setStr <- "acc"
} else {
setStr <- "geoKnowledge"
}
infoValueTable <- infoValueTable[grepl(paste(setStr, "Group", accG, sep=""), rownames(infoValueTable)),]
infoSeekingProps[accG,] <- colMeans(infoValueTable)
rownames(infoSeekingProps)[accG] <- paste("accGroup", accG, sep="")
}
colnames(infoSeekingProps) <- c("T1",  "T2",  "T3", "T4", "T5", "T6",
"T7",  "T8",  "T9", "T10", "T11", "T12", "T13", "T14",
"T15", "T16", "T17", "T18", "T19", "T20", "T21", "T22",
"T23", "T24", "T25", "T26", "T27", "T28", "T29")
infoPropValues <- as.array(c(sort(infoSeekingProps[1,],decreasing=TRUE),sort(infoSeekingProps[2,],decreasing=TRUE),sort(infoSeekingProps[3,],decreasing=TRUE),sort(infoSeekingProps[4,],decreasing=TRUE)))
repN <- ncol(infoSeekingProps)
accGroupL <- c(rep(1, repN),rep(2, repN),rep(3, repN),rep(4, repN))
tests <- c(colnames(sort(infoSeekingProps[1,],decreasing=TRUE)),
colnames(sort(infoSeekingProps[2,],decreasing=TRUE)),
colnames(sort(infoSeekingProps[3,],decreasing=TRUE)),
colnames(sort(infoSeekingProps[4,],decreasing=TRUE)))
ranks <- c(rep(c(1:repN),4))
infoPropDf <- data.frame(infoPropValues,accGroupL,tests,ranks)
testCodes <- c("AREA", "BORD", "WATER", "UTC", "FORE", "TEMP", "LANDL",
"ANIM", "HIGH", "RAIN", "GDP", "FOOD", "MONAR",
"PM", "HAPPI", "DEMO", "PASSP", "OECD", "GINI", "POPO", "POPC",
"OLYM", "UNEM", "POPDE", "FLAG", "SIDE", "INTE", "FIFA", "RELIG")
for (testNum in 1:29)
{
testStr <- paste("T", testNum, sep="")
infoPropDf[infoPropDf$tests==testStr,]$tests <- testCodes[testNum]
}
ggplot(infoPropDf, aes(x = as.numeric(accGroupL), y = as.double(infoPropValues), fill = tests, group=ranks)) +
geom_bar(position="dodge", stat="identity") +
#scale_fill_viridis(discrete=T) +
geom_text(aes(label = tests),position = position_dodge(0.9), size = 2, angle = 90, hjust = 1) +
labs(y="Information Seeking Proportion", x = paste("Participant ", classifyVar, sep=""))
infoSeekingProps <- data.frame(matrix(ncol=29,nrow =4))
for (accG in 1:4)
{
infoValueTable <- infoSeekingFullMatrix[,1:29]
setStr <- ""
if (classifyVar == "confidence")
{
setStr <- "conf"
} else if (classifyVar == "accuracy")  {
setStr <- "acc"
} else {
setStr <- "geoKnowledge"
}
infoValueTable <- infoValueTable[grepl(paste(setStr, "Group", accG, sep=""), rownames(infoValueTable)),]
infoSeekingProps[accG,] <- colMeans(infoValueTable)
rownames(infoSeekingProps)[accG] <- paste("accGroup", accG, sep="")
}
colnames(infoSeekingProps) <- c("T1",  "T2",  "T3", "T4", "T5", "T6",
"T7",  "T8",  "T9", "T10", "T11", "T12", "T13", "T14",
"T15", "T16", "T17", "T18", "T19", "T20", "T21", "T22",
"T23", "T24", "T25", "T26", "T27", "T28", "T29")
infoPropValues <- as.array(c(sort(infoSeekingProps[1,],decreasing=TRUE),sort(infoSeekingProps[2,],decreasing=TRUE),sort(infoSeekingProps[3,],decreasing=TRUE),sort(infoSeekingProps[4,],decreasing=TRUE)))
repN <- ncol(infoSeekingProps)
accGroupL <- c(rep(1, repN),rep(2, repN),rep(3, repN),rep(4, repN))
tests <- c(colnames(sort(infoSeekingProps[1,],decreasing=TRUE)),
colnames(sort(infoSeekingProps[2,],decreasing=TRUE)),
colnames(sort(infoSeekingProps[3,],decreasing=TRUE)),
colnames(sort(infoSeekingProps[4,],decreasing=TRUE)))
ranks <- c(rep(c(1:repN),4))
infoPropDf <- data.frame(infoPropValues,accGroupL,tests,ranks)
testCodes <- c("AREA", "BORD", "WATER", "UTC", "FORE", "TEMP", "LANDL",
"ANIM", "HIGH", "RAIN", "GDP", "FOOD", "MONAR",
"PM", "HAPPI", "DEMO", "PASSP", "OECD", "GINI", "POPO", "POPC",
"OLYM", "UNEM", "POPDE", "FLAG", "SIDE", "INTE", "FIFA", "RELIG")
for (testNum in 1:29)
{
testStr <- paste("T", testNum, sep="")
infoPropDf[infoPropDf$tests==testStr,]$tests <- testCodes[testNum]
}
ggplot(infoPropDf, aes(x = as.numeric(accGroupL), y = as.double(infoPropValues), fill = tests, group=ranks)) +
geom_bar(position="dodge", stat="identity") +
#scale_fill_viridis(discrete=T) +
geom_text(aes(label = tests),position = position_dodge(0.9), size = 2, angle = 90, hjust = 1) +
labs(y="Information Seeking Proportion", x = paste("Participant ", classifyVar, sep=""))
from scipy import stats
requiredPackages <- c("rpart", "caret", "tidyverse", "data.table", "verification", "glmnet",
"GGally", "corrplot", "verification", "ROCR", "maptree",
"glmnet", "gridExtra", "randomForest", "mgcv", "nnet", "pROC", "pls",
"gbm", "e1071", "xgboost", "DT", "NeuralNetTools", "rpart.plot", "ROCR", "scipy")
new.packages <- requiredPackages[!(requiredPackages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(requiredPackages, require, character.only = TRUE)
## Load Libraries and Python script for processing JSON files##
source("Scripts/packageLoad.R")
source_python("Scripts/processFile.py")
#library(devtools)
#install_github("vqv/ggbiplot")
#library(ggbiplot)
dataFolder <- "../JSONs"
## 1. Load data from JSON files##
## 2. Create full df with stage-wise data##
## 3. Create aggregate dataframe with participant-wise data##
## 4. Create dataframe for case-wise data##
## 5. Create matrix for information seeking data by case##
df <- data.frame(matrix(ncol = 0, nrow = 1584))
infoStages <- c("Geography", "History & Politics", "People & Culture")
accuracyMeasure <- "CorrectLikelihood" #CorrectLikelihood, HighestLikelihood or Accuracy
classifyVar <- "knowledge" #knowledge, accuracy or confidence
ids <- list.dirs(dataFolder,recursive = FALSE)
countries <-c("KOR","MON","COL","SWI", "GRE", "BOT")
countriesShort <- c("KOR","MON","COL","SWI", "GRE", "BOT")
countriesLong <- c("SOUTH KOREA","MONGOLIA","COLOMBIA","SWITZERLAND", "GREECE","BOTSWANA")
easyCountryGroup <- c("MON", "COL", "KOR")
hardCountryGroup <- c("SWI", "GRE", "BOT")
#easyCountryGroup <- c("MON", "KOR")
#medCountryGroup <- c("SWI", "COL")
#hardCountryGroup <- c("GRE", "BOT")
source("Scripts/AggregateData.R")
