humanInfluenceHighAlgHighHum = double()
algorInfluenceLowAlgHighHum = double()
humanInfluenceLowAlgHighHum = double()
algorInfluenceHighAlgLowHum = double()
humanInfluenceHighAlgLowHum = double()
algorInfluenceLowAlgLowHum = double()
humanInfluenceLowAlgLowHum = double()
nPpts <- length(participantIDS)
for (x in 1:nPpts)
{
trials <- dotsDF[dotsDF$ID==as.character(participantIDS[x]),]
trials <- as.data.frame(trials)
numOfDotTrials[x] <- nrow(trials)
forcedTrials <- trials[trials$trialType=="force",]
choiceTrials <- trials[trials$trialType=="choice",]
# Overall choice
if (nrow(choiceTrials) > 0)
{
choice <- mean(choiceTrials$whichAdvisor)-1
algorChoice[x] <- choice
}
else
{
algorChoice[x] <- NA
}
# Relative Influence
if (nrow(forcedTrials) > 0)
{
humanTrials <- forcedTrials[forcedTrials$whichAdvisor=="1",]
algorTrials <- forcedTrials[forcedTrials$whichAdvisor=="2",]
humanTrials$cj2 <- with(humanTrials, ifelse(int1 == int2, cj2, cj2*-1))
algorTrials$cj2 <- with(algorTrials, ifelse(int1 == int2, cj2, cj2*-1))
humanAgTrials <- humanTrials[humanTrials$int1==humanTrials$advAnswer,]
algorAgTrials <- algorTrials[algorTrials$int1==algorTrials$advAnswer,]
humanDisTrials <- humanTrials[humanTrials$int1!=humanTrials$advAnswer,]
algorDisTrials <- algorTrials[algorTrials$int1!=algorTrials$advAnswer,]
humanAgConfDiff <- mean(humanAgTrials$cj2 - humanAgTrials$cj1)
humanDisConfDiff <- mean(humanDisTrials$cj2 - humanDisTrials$cj1)
algorAgConfDiff <- mean(algorAgTrials$cj2 - algorAgTrials$cj1)
algorDisConfDiff <- mean(algorDisTrials$cj2 - algorDisTrials$cj1)
influenceR <- (algorAgConfDiff - algorDisConfDiff) - (humanAgConfDiff - humanDisConfDiff)
relativeInfluence[x] <- influenceR
}
else
{
relativeInfluence[x] <- NA
}
# Looking at influence across reliability
for (b in 1:4)
{
blockTrials <- trials[trials$block==b&trials$trialType=="force",]
blockTrialsChoice <- trials[trials$block==b&trials$trialType=="choice",]
humanTrials <- blockTrials[blockTrials$whichAdvisor=="1",]
algorTrials <- blockTrials[blockTrials$whichAdvisor=="2",]
humanAcc <- humanTrials$advAccuracy[1]
algorAcc <- algorTrials$advAccuracy[1]
humanTrials$cj2 <- with(humanTrials, ifelse(int1 == int2, cj2, cj2*-1))
algorTrials$cj2 <- with(algorTrials, ifelse(int1 == int2, cj2, cj2*-1))
humanAgTrials <- humanTrials[humanTrials$int1==humanTrials$advAnswer,]
algorAgTrials <- algorTrials[algorTrials$int1==algorTrials$advAnswer,]
humanDisTrials <- humanTrials[humanTrials$int1!=humanTrials$advAnswer,]
algorDisTrials <- algorTrials[algorTrials$int1!=algorTrials$advAnswer,]
humanAgConfDiff <- mean(humanAgTrials$cj2 - humanAgTrials$cj1)
humanDisConfDiff <- mean(humanDisTrials$cj2 - humanDisTrials$cj1)
algorAgConfDiff <- mean(algorAgTrials$cj2 - algorAgTrials$cj1)
algorDisConfDiff <- mean(algorDisTrials$cj2 - algorDisTrials$cj1)
if (humanAcc == "high" & algorAcc == "high")
{
influenceHighAlgHighHum[x] <- (algorAgConfDiff - algorDisConfDiff) - (humanAgConfDiff - humanDisConfDiff)
choiceHighAlgHighHum[x] <- mean(blockTrialsChoice$whichAdvisor)-1
humanEqualInfluenceHigh[x] <- (humanAgConfDiff - humanDisConfDiff)
algorEqualInfluenceHigh[x] <- (algorAgConfDiff - algorDisConfDiff)
humanInfluenceHighAlgHighHum[x] <- (humanAgConfDiff - humanDisConfDiff)
algorInfluenceHighAlgHighHum[x] <- (algorAgConfDiff - algorDisConfDiff)
}
else if (humanAcc == "high" & algorAcc == "low")
{
influenceLowAlgHighHum[x] <- (algorAgConfDiff - algorDisConfDiff) - (humanAgConfDiff - humanDisConfDiff)
choiceLowAlgHighHum[x] <- mean(blockTrialsChoice$whichAdvisor)-1
humanHighInfluence[x] <- (humanAgConfDiff - humanDisConfDiff)
humanInfluenceLowAlgHighHum[x] <- (humanAgConfDiff - humanDisConfDiff)
algorInfluenceLowAlgHighHum[x] <- (algorAgConfDiff - algorDisConfDiff)
}
else if (humanAcc == "low" & algorAcc == "high")
{
influenceHighAlgLowHum[x] <- (algorAgConfDiff - algorDisConfDiff) - (humanAgConfDiff - humanDisConfDiff)
choiceHighAlgLowHum[x] <- mean(blockTrialsChoice$whichAdvisor)-1
algorHighInfluence[x] <- (algorAgConfDiff - algorDisConfDiff)
humanInfluenceHighAlgLowHum[x] <- (humanAgConfDiff - humanDisConfDiff)
algorInfluenceHighAlgLowHum[x] <- (algorAgConfDiff - algorDisConfDiff)
}
else if (humanAcc == "low" & algorAcc == "low")
{
influenceLowAlgLowHum[x] <- (algorAgConfDiff - algorDisConfDiff) - (humanAgConfDiff - humanDisConfDiff)
choiceLowAlgLowHum[x] <- mean(blockTrialsChoice$whichAdvisor)-1
humanEqualInfluenceLow[x] <- (humanAgConfDiff - humanDisConfDiff)
algorEqualInfluenceLow[x] <- (algorAgConfDiff - algorDisConfDiff)
humanInfluenceLowAlgLowHum[x] <- (humanAgConfDiff - humanDisConfDiff)
algorInfluenceLowAlgLowHum[x] <- (algorAgConfDiff - algorDisConfDiff)
}
}
# Influence of High and Low Reliability Advisors
highTrials <- forcedTrials[forcedTrials$advAccuracy=="high",]
lowTrials <- forcedTrials[forcedTrials$advAccuracy=="low",]
highTrials$cj2 <- with(highTrials, ifelse(int1 == int2, cj2, cj2*-1))
lowTrials$cj2 <- with(lowTrials, ifelse(int1 == int2, cj2, cj2*-1))
agHighTrials <- highTrials[highTrials$int1==highTrials$advAnswer,]
disHighTrials <- highTrials[highTrials$int1!=highTrials$advAnswer,]
agLowTrials <- lowTrials[lowTrials$int1==lowTrials$advAnswer,]
disLowTrials <- lowTrials[lowTrials$int1!=lowTrials$advAnswer,]
agHighConfDiff <- mean(agHighTrials$cj2 - agHighTrials$cj1)
disHighConfDiff <- mean(disHighTrials$cj2 - disHighTrials$cj1)
agLowConfDiff <- mean(agLowTrials$cj2 - agLowTrials$cj1)
disLowConfDiff <- mean(disLowTrials$cj2 - disLowTrials$cj1)
highAdvisorInfluence[x] <- (agHighConfDiff - disHighConfDiff)
lowAdvisorInfluence[x] <- (agLowConfDiff - disLowConfDiff)
# Overall Pre-Advice Accuracy
expTrials <- trials[trials$staircase=="FALSE",]
if (nrow(expTrials) > 0)
{
accuracy <- mean(expTrials$cor1)
preAdviceAccuracy[x] <- accuracy
}
else
{
preAdviceAccuracy[x] <- NA
}
# Add survey scores
integrityScore[x] <- surveyDF[surveyDF$PROLIFIC_PID==participantIDS[x],]$integrityDiff
abilityScore[x] <- surveyDF[surveyDF$PROLIFIC_PID==participantIDS[x],]$abilityDiff
understandingScore[x] <- surveyDF[surveyDF$PROLIFIC_PID==participantIDS[x],]$understandingDiff
intelligentSystemsTotal[x] <- surveyDF[surveyDF$PROLIFIC_PID==participantIDS[x],]$intTotalDiff
specificSystemsTotal[x] <- surveyDF[surveyDF$PROLIFIC_PID==participantIDS[x],]$specTotalDiff
# Investment Data
participantInvestments <- investmentDF[investmentDF$participantID==participantIDS[x],]
numOfTrials <- max(participantInvestments$trialNum)/2
relativeInvestment[x] <- (sum(participantInvestments[participantInvestments$advisorType=="algorithm",]$invested)/numOfTrials) - (sum(participantInvestments[participantInvestments$advisorType=="human",]$invested)/numOfTrials)
relativeExpectedReturns[x] <- mean(as.double(participantInvestments[participantInvestments$advisorType=="algorithm",]$expectedReturn)) - mean(as.double(participantInvestments[participantInvestments$advisorType=="human",]$expectedReturn))
# # Vignette Data
highRisks <- c("HiringHighRisk", "FluHighRisk", "FlightsHighRisk", "RespondersHighRisk", "InsuranceHighRisk")
lowRisks <- c("HiringLowRisk", "FluLowRisk", "FlightsLowRisk", "RespondersLowRisk", "InsuranceLowRisk")
participantVignettes <- vignetteDF[vignetteDF$PROLIFIC_PID==participantIDS[x],]
totalRiskScore[x] <- (sum(participantVignettes[, highRisks]) + sum(participantVignettes[, lowRisks])) - 40
riskDifferenceScore[x] <- (sum(participantVignettes[, highRisks]) - sum(participantVignettes[, lowRisks]))
}
View(vignetteDF)
vignetteDF$PROLIFIC_PID
participantVignettes
(sum(participantVignettes[, highRisks])
+ sum(participantVignettes[, lowRisks]))
totalRiskScore
expdata <- data.frame(participantIDS,numOfDotTrials,algorChoice,relativeInfluence,preAdviceAccuracy,integrityScore,abilityScore,understandingScore,intelligentSystemsTotal,specificSystemsTotal, relativeInvestment, relativeExpectedReturns, totalRiskScore, riskDifferenceScore)
View(expdata)
integrity <- ggplot(data = expdata, aes(x=intelligentSystemsTotal, y=totalRiskScore)) +
geom_point() +
geom_smooth(method=lm , color="skyblue", fill="#69b3a2", se=TRUE) +
theme_classic()
print(integrity +
ggtitle("Intelligent Systems Total Survey Score Against Vignette Total Risk Score")
+ labs(y="Vignette Total Risk Score", x = "Intelligent Systems Total Score"))
cor.test(expdata$intelligentSystemsTotal,expdata$totalRiskScore,method="spearman")
path <- paste(wd, "/SurveyVig.png", sep="")
quartz.save(path, dpi=800)
cor.test(expdata$intelligentSystemsTotal,expdata$totalRiskScore,method="pearson")
corrDF <- data.frame(
SurveyTotal = expdata$intelligentSystemsTotal,
RelativeInfluence = expdata$relativeInfluence,
RelativeInvestment = expdata$relativeInvestment,
TotalRiskScore = expdata$totalRiskScore
)
corrs <- round(cor(corrDF), 4)
p.mat <- cor_pmat(corrs)
pairs.panels(corrDF,
method = test, # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE, # show correlation ellipses
lm = TRUE
)
cor.test(expdata$intelligentSystemsTotal,expdata$relativeInfluence,method=test, exact = FALSE)
cor.test(expdata$intelligentSystemsTotal,expdata$relativeInvestment,method=test, exact = FALSE)
cor.test(expdata$intelligentSystemsTotal,expdata$relativeInvestment,method="pearson", exact = FALSE)
View(investmentDF)
sum(participantInvestments[participantInvestments$advisorType=="algorithm",]$invested
)
numOfTrials
cor.test(expdata$relativeInvestment,expdata$relativeInfluence,method="pearson")
cor.test(expdata$relativeInvestment,expdata$relativeInfluence,method="spearman")
cor.test(expdata$relativeInvestment,expdata$totalRiskScore,method="spearman")
cor.test(expdata$relativeInfluence,expdata$totalRiskScore,method="spearman")
corrDF <- data.frame(
SurveyTotal = expdata$intelligentSystemsTotal,
IntegritySubscale = expdata$integrityScore,
RelativeInfluence = expdata$relativeInfluence,
RelativeInvestment = expdata$relativeInvestment,
TotalRiskScore = expdata$totalRiskScore
)
corrs <- round(cor(corrDF), 4)
p.mat <- cor_pmat(corrs)
pairs.panels(corrDF,
method = test, # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE, # show correlation ellipses
lm = TRUE
)
corrDF <- data.frame(
SurveyTotal = expdata$intelligentSystemsTotal,
RelativeInfluence = expdata$relativeInfluence,
RelativeInvestment = expdata$relativeInvestment,
TotalRiskScore = expdata$totalRiskScore
)
corrs <- round(cor(corrDF), 4)
p.mat <- cor_pmat(corrs)
pairs.panels(corrDF,
method = test, # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE, # show correlation ellipses
lm = TRUE
)
p.mat
corrs
pairs.panels(corrDF,
method = test, # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE, # show correlation ellipses
stars=TRUE
lm = TRUE
pairs.panels(corrDF,
method = test, # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE, # show correlation ellipses
stars=TRUE,
lm = TRUE
)
path <- paste(wd, "/Corrs.png", sep="")
quartz.save(path, dpi=800)
xb <- c("Human Preferred","Algorithm Preferred")
yb <- c(nrow(expdata[expdata$totalRiskScore<0,]),nrow(expdata[expdata$totalRiskScore>0,]))
df <- data.frame("AdvisorPreferred" = xb, "Frequency"= yb)
vignette <- ggplot(df) +
geom_bar( aes(x=AdvisorPreferred, y=Frequency), colour="black", stat="identity", fill="blue", alpha=0.5) +
theme_classic()
print(vignette +
ggtitle("Preference on the Vignette Task") +
labs(x = "Preference", y = "Frequency"))
mean(expdata$totalRiskScore)
sd(expdata$totalRiskScore)
mean(expdata$relativeInvestment)
xb <- c("Human Preferred","Algorithm Preferred")
yb <- c(nrow(expdata[expdata$relativeInvestment<0,]),nrow(expdata[expdata$relativeInvestment>0,]))
df <- data.frame("AdvisorPreferred" = xb, "Frequency"= yb)
investment <- ggplot(df) +
geom_bar( aes(x=AdvisorPreferred, y=Frequency), colour="black", stat="identity", fill="blue", alpha=0.5) +
theme_classic()
print(investment +
ggtitle("Preference on the Investment Task") +
labs(x = "Advisor Preferred", y = "Frequency"))
path <- paste(surveyDataFolder, 'IntSpecTESTSurvey.csv', sep="")
testDF <- read.csv(path, header=TRUE, sep=",")
testDF <- as.data.frame(testDF)
testDF <- filter(testDF, PROLIFIC_PID %in% participantIDS)
retestDF <- filter(retestDF, PROLIFIC_PID %in% participantIDS)
testIntSysDF <- testDF[1:13]
retestIntSysDF <- retestDF[1:13]
testRetestRes <- testRetest(testIntSysDF,retestIntSysDF,id="PROLIFIC_PID",sort=FALSE)
testRetestRes
HS.model1 <- 'latentTrust  =~ relativeInfluence + relativeInvestment + totalRiskScore
latentTrust ~ intelligentSystemsTotal'
# fit the model
fit1 <- sem(HS.model1, data=expdata, se="bootstrap")
# display summary output
summary(fit1, fit.measures=TRUE, standardized=TRUE)
cor.test(expdata$relativeInvestment,expdata$relativeInvestment,method="spearman")
cor.test(expdata$relativeInfluence,expdata$relativeInvestment,method="spearman")
HS.model1 <- 'latentTrust  =~ relativeInfluence + relativeInvestment + totalRiskScore
latentTrust ~ integrityScore'
# fit the model
fit1 <- sem(HS.model1, data=expdata, se="bootstrap")
# display summary output
summary(fit1, fit.measures=TRUE, standardized=TRUE)
label <- "Distribution of Algorithm Relative Influence"
histoBlk <- hist(expdata$relativeInfluence, breaks=10, plot=F)
colours <- rgb(0.2,0.2,0.2,0.2)
plot(histoBlk, col=colours, border = F, main = label, xlab="Relative Influence")
mean(expdata$relativeInfluence)
mean(expdata$algorChoice)
label <- "Distribution of Algorithm Relative Influence"
histoBlk <- hist(expdata$relativeInfluence, breaks=20, plot=F)
colours <- rgb(0.2,0.2,0.2,0.2)
plot(histoBlk, col=colours, border = F, main = label, xlab="Relative Influence")
mean(expdata$relativeInfluence)
label <- "Distribution of Algorithm Relative Influence"
histoBlk <- hist(expdata$relativeInfluence, breaks=20, plot=F)
colours <- rgb(0.2,0.2,0.2,0.2)
plot(histoBlk, col=colours, border = F, main = label, xlab="Relative Influence")
mean(expdata$relativeInfluence)
View(dotsDF)
View(vignetteDF)
sum(participantVignettes[, highRisks]
)
sum(participantVignettes[, lowRisks])
(sum(participantVignettes[, highRisks]) + sum(participantVignettes[, lowRisks]))
participantIDS[x]
"6081728972120aa7f9685791"
participantVignettes <- vignetteDF[vignetteDF$PROLIFIC_PID=="6081728972120aa7f9685791",]
View(participantVignettes)
path <- paste(vigDataFolder, 'VignetteData.csv', sep="")
vignetteDF <- read.csv(path, header=TRUE, sep=",")
numOfDotTrials = double()
algorChoice = double()
relativeInfluence = double()
preAdviceAccuracy = double()
integrityScore = integer()
abilityScore = integer()
understandingScore = integer()
intelligentSystemsTotal = integer()
specificSystemsTotal = integer()
relativeInvestment = double()
relativeExpectedReturns = double()
totalRiskScore = integer()
riskDifferenceScore = integer()
##### Blockwise measures
influenceHighAlgHighHum = double()
choiceHighAlgHighHum = double()
influenceLowAlgHighHum = double()
choiceLowAlgHighHum = double()
influenceHighAlgLowHum = double()
choiceHighAlgLowHum = double()
influenceLowAlgLowHum = double()
choiceLowAlgLowHum = double()
humanHighInfluence = double()
algorHighInfluence = double()
humanEqualInfluenceLow = double()
humanEqualInfluenceHigh = double()
algorEqualInfluenceLow = double()
algorEqualInfluenceHigh = double()
highAdvisorInfluence = double()
lowAdvisorInfluence = double()
algorInfluenceHighAlgHighHum = double()
humanInfluenceHighAlgHighHum = double()
algorInfluenceLowAlgHighHum = double()
humanInfluenceLowAlgHighHum = double()
algorInfluenceHighAlgLowHum = double()
humanInfluenceHighAlgLowHum = double()
algorInfluenceLowAlgLowHum = double()
humanInfluenceLowAlgLowHum = double()
nPpts <- length(participantIDS)
for (x in 1:nPpts)
{
trials <- dotsDF[dotsDF$ID==as.character(participantIDS[x]),]
trials <- as.data.frame(trials)
numOfDotTrials[x] <- nrow(trials)
forcedTrials <- trials[trials$trialType=="force",]
choiceTrials <- trials[trials$trialType=="choice",]
# Overall choice
if (nrow(choiceTrials) > 0)
{
choice <- mean(choiceTrials$whichAdvisor)-1
algorChoice[x] <- choice
}
else
{
algorChoice[x] <- NA
}
# Relative Influence
if (nrow(forcedTrials) > 0)
{
humanTrials <- forcedTrials[forcedTrials$whichAdvisor=="1",]
algorTrials <- forcedTrials[forcedTrials$whichAdvisor=="2",]
humanTrials$cj2 <- with(humanTrials, ifelse(int1 == int2, cj2, cj2*-1))
algorTrials$cj2 <- with(algorTrials, ifelse(int1 == int2, cj2, cj2*-1))
humanAgTrials <- humanTrials[humanTrials$int1==humanTrials$advAnswer,]
algorAgTrials <- algorTrials[algorTrials$int1==algorTrials$advAnswer,]
humanDisTrials <- humanTrials[humanTrials$int1!=humanTrials$advAnswer,]
algorDisTrials <- algorTrials[algorTrials$int1!=algorTrials$advAnswer,]
humanAgConfDiff <- mean(humanAgTrials$cj2 - humanAgTrials$cj1)
humanDisConfDiff <- mean(humanDisTrials$cj2 - humanDisTrials$cj1)
algorAgConfDiff <- mean(algorAgTrials$cj2 - algorAgTrials$cj1)
algorDisConfDiff <- mean(algorDisTrials$cj2 - algorDisTrials$cj1)
influenceR <- (algorAgConfDiff - algorDisConfDiff) - (humanAgConfDiff - humanDisConfDiff)
relativeInfluence[x] <- influenceR
}
else
{
relativeInfluence[x] <- NA
}
# Looking at influence across reliability
for (b in 1:4)
{
blockTrials <- trials[trials$block==b&trials$trialType=="force",]
blockTrialsChoice <- trials[trials$block==b&trials$trialType=="choice",]
humanTrials <- blockTrials[blockTrials$whichAdvisor=="1",]
algorTrials <- blockTrials[blockTrials$whichAdvisor=="2",]
humanAcc <- humanTrials$advAccuracy[1]
algorAcc <- algorTrials$advAccuracy[1]
humanTrials$cj2 <- with(humanTrials, ifelse(int1 == int2, cj2, cj2*-1))
algorTrials$cj2 <- with(algorTrials, ifelse(int1 == int2, cj2, cj2*-1))
humanAgTrials <- humanTrials[humanTrials$int1==humanTrials$advAnswer,]
algorAgTrials <- algorTrials[algorTrials$int1==algorTrials$advAnswer,]
humanDisTrials <- humanTrials[humanTrials$int1!=humanTrials$advAnswer,]
algorDisTrials <- algorTrials[algorTrials$int1!=algorTrials$advAnswer,]
humanAgConfDiff <- mean(humanAgTrials$cj2 - humanAgTrials$cj1)
humanDisConfDiff <- mean(humanDisTrials$cj2 - humanDisTrials$cj1)
algorAgConfDiff <- mean(algorAgTrials$cj2 - algorAgTrials$cj1)
algorDisConfDiff <- mean(algorDisTrials$cj2 - algorDisTrials$cj1)
if (humanAcc == "high" & algorAcc == "high")
{
influenceHighAlgHighHum[x] <- (algorAgConfDiff - algorDisConfDiff) - (humanAgConfDiff - humanDisConfDiff)
choiceHighAlgHighHum[x] <- mean(blockTrialsChoice$whichAdvisor)-1
humanEqualInfluenceHigh[x] <- (humanAgConfDiff - humanDisConfDiff)
algorEqualInfluenceHigh[x] <- (algorAgConfDiff - algorDisConfDiff)
humanInfluenceHighAlgHighHum[x] <- (humanAgConfDiff - humanDisConfDiff)
algorInfluenceHighAlgHighHum[x] <- (algorAgConfDiff - algorDisConfDiff)
}
else if (humanAcc == "high" & algorAcc == "low")
{
influenceLowAlgHighHum[x] <- (algorAgConfDiff - algorDisConfDiff) - (humanAgConfDiff - humanDisConfDiff)
choiceLowAlgHighHum[x] <- mean(blockTrialsChoice$whichAdvisor)-1
humanHighInfluence[x] <- (humanAgConfDiff - humanDisConfDiff)
humanInfluenceLowAlgHighHum[x] <- (humanAgConfDiff - humanDisConfDiff)
algorInfluenceLowAlgHighHum[x] <- (algorAgConfDiff - algorDisConfDiff)
}
else if (humanAcc == "low" & algorAcc == "high")
{
influenceHighAlgLowHum[x] <- (algorAgConfDiff - algorDisConfDiff) - (humanAgConfDiff - humanDisConfDiff)
choiceHighAlgLowHum[x] <- mean(blockTrialsChoice$whichAdvisor)-1
algorHighInfluence[x] <- (algorAgConfDiff - algorDisConfDiff)
humanInfluenceHighAlgLowHum[x] <- (humanAgConfDiff - humanDisConfDiff)
algorInfluenceHighAlgLowHum[x] <- (algorAgConfDiff - algorDisConfDiff)
}
else if (humanAcc == "low" & algorAcc == "low")
{
influenceLowAlgLowHum[x] <- (algorAgConfDiff - algorDisConfDiff) - (humanAgConfDiff - humanDisConfDiff)
choiceLowAlgLowHum[x] <- mean(blockTrialsChoice$whichAdvisor)-1
humanEqualInfluenceLow[x] <- (humanAgConfDiff - humanDisConfDiff)
algorEqualInfluenceLow[x] <- (algorAgConfDiff - algorDisConfDiff)
humanInfluenceLowAlgLowHum[x] <- (humanAgConfDiff - humanDisConfDiff)
algorInfluenceLowAlgLowHum[x] <- (algorAgConfDiff - algorDisConfDiff)
}
}
# Influence of High and Low Reliability Advisors
highTrials <- forcedTrials[forcedTrials$advAccuracy=="high",]
lowTrials <- forcedTrials[forcedTrials$advAccuracy=="low",]
highTrials$cj2 <- with(highTrials, ifelse(int1 == int2, cj2, cj2*-1))
lowTrials$cj2 <- with(lowTrials, ifelse(int1 == int2, cj2, cj2*-1))
agHighTrials <- highTrials[highTrials$int1==highTrials$advAnswer,]
disHighTrials <- highTrials[highTrials$int1!=highTrials$advAnswer,]
agLowTrials <- lowTrials[lowTrials$int1==lowTrials$advAnswer,]
disLowTrials <- lowTrials[lowTrials$int1!=lowTrials$advAnswer,]
agHighConfDiff <- mean(agHighTrials$cj2 - agHighTrials$cj1)
disHighConfDiff <- mean(disHighTrials$cj2 - disHighTrials$cj1)
agLowConfDiff <- mean(agLowTrials$cj2 - agLowTrials$cj1)
disLowConfDiff <- mean(disLowTrials$cj2 - disLowTrials$cj1)
highAdvisorInfluence[x] <- (agHighConfDiff - disHighConfDiff)
lowAdvisorInfluence[x] <- (agLowConfDiff - disLowConfDiff)
# Overall Pre-Advice Accuracy
expTrials <- trials[trials$staircase=="FALSE",]
if (nrow(expTrials) > 0)
{
accuracy <- mean(expTrials$cor1)
preAdviceAccuracy[x] <- accuracy
}
else
{
preAdviceAccuracy[x] <- NA
}
# Add survey scores
integrityScore[x] <- surveyDF[surveyDF$PROLIFIC_PID==participantIDS[x],]$integrityDiff
abilityScore[x] <- surveyDF[surveyDF$PROLIFIC_PID==participantIDS[x],]$abilityDiff
understandingScore[x] <- surveyDF[surveyDF$PROLIFIC_PID==participantIDS[x],]$understandingDiff
intelligentSystemsTotal[x] <- surveyDF[surveyDF$PROLIFIC_PID==participantIDS[x],]$intTotalDiff
specificSystemsTotal[x] <- surveyDF[surveyDF$PROLIFIC_PID==participantIDS[x],]$specTotalDiff
# Investment Data
participantInvestments <- investmentDF[investmentDF$participantID==participantIDS[x],]
numOfTrials <- max(participantInvestments$trialNum)/2
relativeInvestment[x] <- (sum(participantInvestments[participantInvestments$advisorType=="algorithm",]$invested)/numOfTrials) - (sum(participantInvestments[participantInvestments$advisorType=="human",]$invested)/numOfTrials)
relativeExpectedReturns[x] <- mean(as.double(participantInvestments[participantInvestments$advisorType=="algorithm",]$expectedReturn)) - mean(as.double(participantInvestments[participantInvestments$advisorType=="human",]$expectedReturn))
# # Vignette Data
highRisks <- c("HiringHighRisk", "FluHighRisk", "FlightsHighRisk", "RespondersHighRisk", "InsuranceHighRisk")
lowRisks <- c("HiringLowRisk", "FluLowRisk", "FlightsLowRisk", "RespondersLowRisk", "InsuranceLowRisk")
participantVignettes <- vignetteDF[vignetteDF$PROLIFIC_PID==participantIDS[x],]
totalRiskScore[x] <- (sum(participantVignettes[, highRisks]) + sum(participantVignettes[, lowRisks])) - 40
riskDifferenceScore[x] <- (sum(participantVignettes[, highRisks]) - sum(participantVignettes[, lowRisks]))
}
expdata <- data.frame(participantIDS,numOfDotTrials,algorChoice,relativeInfluence,preAdviceAccuracy,integrityScore,abilityScore,understandingScore,intelligentSystemsTotal,specificSystemsTotal, relativeInvestment, relativeExpectedReturns, totalRiskScore, riskDifferenceScore)
blockdata <- data.frame(participantIDS,influenceHighAlgHighHum,choiceHighAlgHighHum,
influenceLowAlgHighHum,choiceLowAlgHighHum,influenceHighAlgLowHum,
choiceHighAlgLowHum,influenceLowAlgLowHum,choiceLowAlgLowHum,humanHighInfluence,
algorHighInfluence,humanEqualInfluenceLow,humanEqualInfluenceHigh,algorEqualInfluenceLow,
algorEqualInfluenceHigh,highAdvisorInfluence,lowAdvisorInfluence,
algorInfluenceHighAlgHighHum,humanInfluenceHighAlgHighHum,
algorInfluenceLowAlgHighHum,humanInfluenceLowAlgHighHum,
algorInfluenceHighAlgLowHum,humanInfluenceHighAlgLowHum,
algorInfluenceLowAlgLowHum,humanInfluenceLowAlgLowHum)
integrity <- ggplot(data = expdata, aes(x=intelligentSystemsTotal, y=totalRiskScore)) +
geom_point() +
geom_smooth(method=lm , color="skyblue", fill="#69b3a2", se=TRUE) +
theme_classic()
print(integrity +
ggtitle("Intelligent Systems Total Survey Score Against Vignette Total Risk Score")
+ labs(y="Vignette Total Risk Score", x = "Intelligent Systems Total Score"))
integrity <- ggplot(data = expdata, aes(x=intelligentSystemsTotal, y=totalRiskScore)) +
geom_point() +
geom_smooth(method=lm , color="skyblue", fill="#69b3a2", se=TRUE) +
theme_classic()
print(integrity +
ggtitle("Intelligent Systems Total Survey Score Against Vignette Total Risk Score")
+ labs(y="Vignette Total Risk Score", x = "Intelligent Systems Total Score"))
