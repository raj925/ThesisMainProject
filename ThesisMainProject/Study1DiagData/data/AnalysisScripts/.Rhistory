max_val = max(Calibration))
calibrationDiffAllData %>%
group_by(Feedback,Sequence) %>%
dplyr::mutate(N = n()) %>%
dplyr::summarise(m_N = mean(N),
m_val = mean(Calibration),
sd_val = sd(Calibration),
min_val = min(Calibration),
max_val = max(Calibration))
calibrationDiffAllData %>%
group_by(Feedback,Sequence) %>%
dplyr::mutate(N = n()) %>%
dplyr::summarise(m_N = mean(N),
m_val = mean(Calibration,na.rm=T),
sd_val = sd(Calibration,na.rm=T),
min_val = min(Calibration,na.rm=T),
max_val = max(Calibration,na.rm=T))
calibrationDiffAllData %>%
group_by(Feedback,Difficulty) %>%
dplyr::mutate(N = n()) %>%
dplyr::summarise(m_N = mean(N),
m_val = mean(Calibration,na.rm=T),
sd_val = sd(Calibration,na.rm=T),
min_val = min(Calibration,na.rm=T),
max_val = max(Calibration,na.rm=T))
meanAcc <- mean(expdataTasks$accuracyOverall)
meanAccCont <- mean(expdataTasks[expdataTasks$Condition=="continuous",]$accuracyOverall)
meanAccBin <- mean(expdataTasks[expdataTasks$Condition=="binary",]$accuracyOverall)
meanAccBinEasy <- mean(trialsTasks[trialsTasks$dotdifference==20&trialsTasks$taskType=="binary"&trialsTasks$trialType!="catch",]$cor)
meanAccBinMed <- mean(trialsTasks[trialsTasks$dotdifference==10&trialsTasks$taskType=="binary"&trialsTasks$trialType!="catch",]$cor)
meanAccBinHard <- mean(trialsTasks[trialsTasks$dotdifference==5&trialsTasks$taskType=="binary"&trialsTasks$trialType!="catch",]$cor)
meanAccContEasy <- mean(trialsTasks[trialsTasks$dotdifference==20&trialsTasks$taskType=="continuous"&trialsTasks$trialType!="catch",]$cor)
meanAccContMed <- mean(trialsTasks[trialsTasks$dotdifference==10&trialsTasks$taskType=="continuous"&trialsTasks$trialType!="catch",]$cor)
meanAccContHard <- mean(trialsTasks[trialsTasks$dotdifference==5&trialsTasks$taskType=="continuous"&trialsTasks$trialType!="catch",]$cor)
meanAccCont <- mean(expdataTasks[expdataTasks$Condition=="continuous",]$accuracyOverall)
meanAccBin <- mean(expdataTasks[expdataTasks$Condition=="binary",]$accuracyOverall)
meanAccCont
meanAccBin
t.test(expdataTasks[expdataTasks$Condition=="continuous",]$accuracyOverall,
expdataTasks[expdataTasks$Condition=="binary",]$accuracyOverall)
0.7152299 - 0.6952500
workPpts <- outcomeVars[outcomeVars$treatments!="No work, Big Cash",]
lmphqW <- lm(phqTotalEnd ~ treatments + phqTotalBase + genders + camps + enums, data = workPpts)
stdCoeffW <- lm.beta(lmphqW)
summary(stdCoeffW)
cashPpts <- outcomeVars[outcomeVars$treatments!="Cash for Work",]
lmphqC <- lm(phqTotalEnd ~ treatments + phqTotalBase + genders + camps + enums, data = cashPpts)
stdCoeffC <-lm.beta(lmphqC)
summary(stdCoeffC)
workPpts <- outcomeVars[outcomeVars$treatments!="No work, Big Cash",]
lmphqW <- lm(phqTotalEnd ~ treatments + phqTotalBase + genders + camps + enums, data = workPpts)
stdCoeffW <- lm.beta(lmphqW)
summary(stdCoeffW)
cashPpts <- outcomeVars[outcomeVars$treatments!="Cash for Work",]
lmphqC <- lm(phqTotalEnd ~ treatments + phqTotalBase + genders + camps + enums, data = cashPpts)
stdCoeffC <-lm.beta(lmphqC)
summary(stdCoeffC)
linearHypothesis(lmphqW, paste("treatmentsNo work, Small Cash    = ", lmphqC$coefficients[2], sep=""))
View(outcomeVars)
workPpts <- outcomeVars[outcomeVars$treatments!="No work, Big Cash",]
lmphqW <- lm(stressEnd ~ treatments + stressBase + genders + camps + enums, data = workPpts)
stdCoeffW <- lm.beta(lmphqW)
summary(stdCoeffW)
cashPpts <- outcomeVars[outcomeVars$treatments!="Cash for Work",]
lmphqC <- lm(stressEnd ~ treatments + stressBase + genders + camps + enums, data = cashPpts)
stdCoeffC <-lm.beta(lmphqC)
summary(stdCoeffC)
outcomeVars <- data.frame()
naIDs <- endlineData[!is.na(endlineData$phq_1),]$hhid1
baselineData <- baselineData[baselineData$hhid1 %in% naIDs,]
endlineData <- endlineData[endlineData$hhid1 %in% naIDs,]
ids <- intersect(baselineData$hhid1,endlineData$hhid1)
phqTotalEnd <- c()
phqTotalBase <- c()
stressEnd <- c()
stressBase <- c()
lifeSatEnd <- c()
lifeSatBase <- c()
socialEnd <- c()
socialBase <- c()
selfworthEnd <- c()
selfworthBase <- c()
controlEnd <- c()
controlBase <- c()
stabilityEnd <- c()
stabilityBase <- c()
genders <- c()
camps <- c()
enums <- c()
ages <- c()
marrys <- c()
educations <- c()
blocks <- c()
treatments <- c()
meanphq <- mean(endlineData$phq_1 + endlineData$phq_2 +
endlineData$phq_3 + endlineData$phq_4 + endlineData$phq_5 +
endlineData$phq_6 + endlineData$phq_7 + endlineData$phq_8 +
endlineData$phq_9,na.rm=TRUE)
meanstress <- mean(endlineData$stress_a + endlineData$stress_b + endlineData$stress_c,na.rm=TRUE)
meansat <- mean(endlineData$life_satisfaction_a + endlineData$life_satisfaction_b + endlineData$life_satisfaction_c + endlineData$life_satisfaction_d,na.rm=TRUE)
meansocial <- mean(endlineData$sociability_a + endlineData$sociability_b + endlineData$sociability_c,na.rm=TRUE)
meanpurpose <- mean(endlineData$purpose_a + endlineData$purpose_b,na.rm=TRUE)
meancontrol <- mean(endlineData$locus_of_control_a + endlineData$locus_of_control_b +
endlineData$locus_of_control_c + endlineData$locus_of_control_d,na.rm=TRUE)
meanstable <- mean(endlineData$stability_a + endlineData$stability_b + endlineData$stability_c + endlineData$stability_d + endlineData$stability_e,na.rm=TRUE)
for (id in ids)
{
endlineSubset <- endlineData[endlineData$hhid1==id,]
baselineSubset <- baselineData[baselineData$hhid1==id,]
endlineSubset <- endlineSubset[1,]
baselineSubset <- baselineSubset[1,]
#####
baseVar <- (baselineSubset$phq_1 + baselineSubset$phq_2 +
baselineSubset$phq_3 + baselineSubset$phq_4 + baselineSubset$phq_5 +
baselineSubset$phq_6 + baselineSubset$phq_7 + baselineSubset$phq_8 +
baselineSubset$phq_9)
phqTotalEnd <- c(phqTotalEnd, (endlineSubset$phq_1 + endlineSubset$phq_2 +
endlineSubset$phq_3 + endlineSubset$phq_4 + endlineSubset$phq_5 +
endlineSubset$phq_6 + endlineSubset$phq_7 + endlineSubset$phq_8 +
endlineSubset$phq_9))
phqTotalBase <- c(phqTotalBase, baseVar)
######
baseVar <- (baselineSubset$stress_a + baselineSubset$stress_b + baselineSubset$stress_c)
stressEnd <- c(stressEnd, (endlineSubset$stress_a + endlineSubset$stress_b + endlineSubset$stress_c)-meanstress)
stressBase <- c(stressBase, baseVar)
######
baseVar <- (baselineSubset$life_satisfaction_a + baselineSubset$life_satisfaction_b + baselineSubset$life_satisfaction_c + baselineSubset$life_satisfaction_d)
lifeSatEnd <- c(lifeSatEnd, (endlineSubset$life_satisfaction_a + endlineSubset$life_satisfaction_b + endlineSubset$life_satisfaction_c + endlineSubset$life_satisfaction_d)-meansat)
lifeSatBase <- c(lifeSatBase, baseVar)
######
baseVar <- (baselineSubset$sociability_a + baselineSubset$sociability_b + baselineSubset$sociability_c)
socialEnd <- c(socialEnd, (endlineSubset$sociability_a + endlineSubset$sociability_b + endlineSubset$sociability_c)-meansocial)
socialBase <- c(socialBase, baseVar)
######
baseVar <- (baselineSubset$purpose_a + baselineSubset$purpose_b)
selfworthEnd <- c(selfworthEnd, (endlineSubset$purpose_a + endlineSubset$purpose_b)-meanpurpose)
selfworthBase <- c(selfworthBase, baseVar)
######
baseVar <- (baselineSubset$locus_of_control_a + baselineSubset$locus_of_control_b +
baselineSubset$locus_of_control_c + baselineSubset$locus_of_control_d)
controlEnd <- c(controlEnd, (endlineSubset$locus_of_control_a + endlineSubset$locus_of_control_b +
endlineSubset$locus_of_control_c + endlineSubset$locus_of_control_d)-meancontrol)
controlBase <- c(controlBase, baseVar)
######
baseVar <- (baselineSubset$stability_a + baselineSubset$stability_b + baselineSubset$stability_c + baselineSubset$stability_d + baselineSubset$stability_e)
stabilityEnd <- c(stabilityEnd, (endlineSubset$stability_a + endlineSubset$stability_b + endlineSubset$stability_c + endlineSubset$stability_d + endlineSubset$stability_e)-meanstable)
stabilityBase <- c(stabilityBase, baseVar)
######
genders <- c(genders, baselineSubset$resp_gender)
camps <- c(camps, baselineSubset$campname)
enums <- c(enums, baselineSubset$enumname)
ages <- c(ages, baselineSubset$age)
marrys <- c(marrys, baselineSubset$marry)
educations <- c(educations, baselineSubset$education_max)
blocks <- c(blocks, baselineSubset$blockname)
treatments <- c(treatments, baselineSubset$treatment)
}
outcomeVars <- data.frame(phqTotalEnd, phqTotalBase, stressEnd, stressBase, lifeSatEnd, lifeSatBase, socialEnd, socialBase, selfworthEnd, selfworthBase, controlEnd, controlBase,  stabilityEnd, stabilityBase, genders, camps, enums, ages, marrys, educations, blocks, treatments)
workPpts <- outcomeVars[outcomeVars$treatments!="No work, Big Cash",]
lmphqW <- lm(phqTotalEnd ~ treatments + phqTotalBase + genders + camps + enums, data = workPpts)
stdCoeffW <- lm.beta(lmphqW)
summary(stdCoeffW)
cashPpts <- outcomeVars[outcomeVars$treatments!="Cash for Work",]
lmphqC <- lm(phqTotalEnd ~ treatments + phqTotalBase + genders + camps + enums, data = cashPpts)
stdCoeffC <-lm.beta(lmphqC)
summary(stdCoeffC)
outcomeVars <- data.frame()
naIDs <- endlineData[!is.na(endlineData$phq_1),]$hhid1
baselineData <- baselineData[baselineData$hhid1 %in% naIDs,]
endlineData <- endlineData[endlineData$hhid1 %in% naIDs,]
ids <- intersect(baselineData$hhid1,endlineData$hhid1)
phqTotalEnd <- c()
phqTotalBase <- c()
stressEnd <- c()
stressBase <- c()
lifeSatEnd <- c()
lifeSatBase <- c()
socialEnd <- c()
socialBase <- c()
selfworthEnd <- c()
selfworthBase <- c()
controlEnd <- c()
controlBase <- c()
stabilityEnd <- c()
stabilityBase <- c()
genders <- c()
camps <- c()
enums <- c()
ages <- c()
marrys <- c()
educations <- c()
blocks <- c()
treatments <- c()
for (id in ids)
{
endlineSubset <- endlineData[endlineData$hhid1==id,]
baselineSubset <- baselineData[baselineData$hhid1==id,]
endlineSubset <- endlineSubset[1,]
baselineSubset <- baselineSubset[1,]
#####
baseVar <- (baselineSubset$phq_1 + baselineSubset$phq_2 +
baselineSubset$phq_3 + baselineSubset$phq_4 + baselineSubset$phq_5 +
baselineSubset$phq_6 + baselineSubset$phq_7 + baselineSubset$phq_8 +
baselineSubset$phq_9)
phqTotalEnd <- c(phqTotalEnd, (endlineSubset$phq_1 + endlineSubset$phq_2 +
endlineSubset$phq_3 + endlineSubset$phq_4 + endlineSubset$phq_5 +
endlineSubset$phq_6 + endlineSubset$phq_7 + endlineSubset$phq_8 +
endlineSubset$phq_9))
phqTotalBase <- c(phqTotalBase, baseVar)
######
baseVar <- (baselineSubset$stress_a + baselineSubset$stress_b + baselineSubset$stress_c)
stressEnd <- c(stressEnd, (endlineSubset$stress_a + endlineSubset$stress_b + endlineSubset$stress_c))
stressBase <- c(stressBase, baseVar)
######
baseVar <- (baselineSubset$life_satisfaction_a + baselineSubset$life_satisfaction_b + baselineSubset$life_satisfaction_c + baselineSubset$life_satisfaction_d)
lifeSatEnd <- c(lifeSatEnd, (endlineSubset$life_satisfaction_a + endlineSubset$life_satisfaction_b + endlineSubset$life_satisfaction_c + endlineSubset$life_satisfaction_d))
lifeSatBase <- c(lifeSatBase, baseVar)
######
baseVar <- (baselineSubset$sociability_a + baselineSubset$sociability_b + baselineSubset$sociability_c)
socialEnd <- c(socialEnd, (endlineSubset$sociability_a + endlineSubset$sociability_b + endlineSubset$sociability_c))
socialBase <- c(socialBase, baseVar)
######
baseVar <- (baselineSubset$purpose_a + baselineSubset$purpose_b)
selfworthEnd <- c(selfworthEnd, (endlineSubset$purpose_a + endlineSubset$purpose_b))
selfworthBase <- c(selfworthBase, baseVar)
######
baseVar <- (baselineSubset$locus_of_control_a + baselineSubset$locus_of_control_b +
baselineSubset$locus_of_control_c + baselineSubset$locus_of_control_d)
controlEnd <- c(controlEnd, (endlineSubset$locus_of_control_a + endlineSubset$locus_of_control_b +
endlineSubset$locus_of_control_c + endlineSubset$locus_of_control_d))
controlBase <- c(controlBase, baseVar)
######
baseVar <- (baselineSubset$stability_a + baselineSubset$stability_b + baselineSubset$stability_c + baselineSubset$stability_d + baselineSubset$stability_e)
stabilityEnd <- c(stabilityEnd, (endlineSubset$stability_a + endlineSubset$stability_b + endlineSubset$stability_c + endlineSubset$stability_d + endlineSubset$stability_e))
stabilityBase <- c(stabilityBase, baseVar)
######
genders <- c(genders, baselineSubset$resp_gender)
camps <- c(camps, baselineSubset$campname)
enums <- c(enums, baselineSubset$enumname)
ages <- c(ages, baselineSubset$age)
marrys <- c(marrys, baselineSubset$marry)
educations <- c(educations, baselineSubset$education_max)
blocks <- c(blocks, baselineSubset$blockname)
treatments <- c(treatments, baselineSubset$treatment)
}
outcomeVars <- data.frame(phqTotalEnd, phqTotalBase, stressEnd, stressBase, lifeSatEnd, lifeSatBase, socialEnd, socialBase, selfworthEnd, selfworthBase, controlEnd, controlBase,  stabilityEnd, stabilityBase, genders, camps, enums, ages, marrys, educations, blocks, treatments)
workPpts <- outcomeVars[outcomeVars$treatments!="No work, Big Cash",]
lmphqW <- lm(phqTotalEnd ~ treatments + phqTotalBase + genders + camps + enums, data = workPpts)
stdCoeffW <- lm.beta(lmphqW)
summary(stdCoeffW)
workPpts <- outcomeVars[outcomeVars$treatments!="No work, Big Cash",]
lmphqW <- lm(stressEnd ~ treatments + stressBase + genders + camps + enums, data = workPpts)
stdCoeffW <- lm.beta(lmphqW)
summary(stdCoeffW)
workPpts <- outcomeVars[outcomeVars$treatments!="No work, Big Cash",]
lmphqW <- lm(lifeSatEnd ~ treatments + lifeSatBase + genders + camps + enums, data = workPpts)
stdCoeffW <- lm.beta(lmphqW)
summary(stdCoeffW)
cashPpts <- outcomeVars[outcomeVars$treatments!="Cash for Work",]
lmphqC <- lm(lifeSatEnd ~ treatments + lifeSatBase + genders + camps + enums, data = cashPpts)
stdCoeffC <-lm.beta(lmphqC)
summary(stdCoeffC)
linearHypothesis(lmphqW, paste("treatmentsNo work, Small Cash    = ", lmphqC$coefficients[2], sep=""))
outcomeVars <- mutate(outcomeVars, idx_end = idx_invcov(outcomeVars$phqTotalEnd, outcomeVars$stressEnd, outcomeVars$lifeSatEnd,
outcomeVars$socialEnd, outcomeVars$selfworthEnd, outcomeVars$controlEnd,
outcomeVars$stabilityEnd))
outcomeVars <- mutate(outcomeVars, idx_base = idx_invcov(outcomeVars$phqTotalBase, outcomeVars$stressBase, outcomeVars$lifeSatBase,
outcomeVars$socialBase, outcomeVars$selfworthBase, outcomeVars$controlBase,
outcomeVars$stabilityBase))
workPpts <- outcomeVars[outcomeVars$treatments!="No work, Big Cash",]
lmphqW <- lm(idx_end ~ treatments + idx_base + genders + camps + enums, data = workPpts)
stdCoeffW <- lm.beta(lmphqW)
summary(stdCoeffW)
cashPpts <- outcomeVars[outcomeVars$treatments!="Cash for Work",]
lmphqC <- lm(idx_end ~ treatments + idx_base + genders + camps + enums, data = cashPpts)
stdCoeffC <-lm.beta(lmphqC)
summary(stdCoeffC)
linearHypothesis(lmphqW, paste("treatmentsNo work, Small Cash    = ", lmphqC$coefficients[2], sep=""))
knitr::opts_chunk$set(echo = TRUE)
options(repos="https://cran.rstudio.com" )
## Load Libraries ##
pathSource <- "./packageLoad.R"
source(pathSource)
## Load data from experiment file ##
mainFolder <- ".."
# Load raw SPSS data
OBdata <- read_sav(paste(mainFolder, "/Raw datasets/Gino,+Moore,+&+Bazerman+2009_+Replication+and+extensions_July+18,+2020_23.10.sav", sep=""))
#columnSel <- c("serious", "seen", "pay", "age", "gender", "origcount", "residence", "soc_class", "engunder")
#surveyQs <- OBdata %>% select(columnSel)
runExclusions <- FALSE
if (runExclusions)
{
mess <- paste("Total Number of Participants: ", nrow(OBdata), sep="")
mess <- paste(mess, ", Duplicate Exclusions: ", nrow(OBdata[OBdata$Q_RelevantIDDuplicate=="true",]))
OBdata <- OBdata[OBdata$Q_RelevantIDDuplicate!="true",]
mess <- paste(mess, ", Seriousness Exclusions: ", nrow(OBdata[OBdata$serious<4,]))
OBdata <- OBdata[OBdata$serious>=4,]
mess <- paste(mess, ", English Understanding Exclusions: ", nrow(OBdata[OBdata$engunder<5,]))
OBdata <- OBdata[OBdata$engunder>=5,]
mess <- paste(mess, ", Seen Materials Exclusions: ", nrow(OBdata[OBdata$seen==1,]))
OBdata <- OBdata[OBdata$seen==2,]
mess <- paste(mess, ", Remaining Participants: ", nrow(OBdata))
message(mess)
}
OBdata <- as.data.frame(OBdata)
for (x in 1:nrow(OBdata))
{
if (!(is.na(OBdata$S1_DV1_uneth_[x])))
{
OBdata$outcome[x] <- "positive"
}
else if (!(is.na(OBdata$s1_DV1_uneth_.0[x])))
{
OBdata$outcome[x] <- "negative"
}
else
{
OBdata$outcome[x] <- "no outcome"
}
}
OBdata$unethicalityS1 <- coalesce(OBdata$S1_DV1_uneth_, OBdata$s1_DV1_uneth_.0, OBdata$s1_DV1_uneth_.1)
OBdata$unethicalityS2 <- coalesce(OBdata$S2_DV1_uneth_, OBdata$s2_DV1_uneth_.0, OBdata$s2_DV1_uneth_.1)
OBdata$unethicalityS3 <- coalesce(OBdata$s3_DV1_uneth_, OBdata$s3_DV1_uneth_.0, OBdata$s3_DV1_uneth_.1)
OBdata$unethicalityS4 <- coalesce(OBdata$s4_DV1_uneth_, OBdata$s4_DV1_uneth_.0, OBdata$s4_DV1_uneth_.1)
OBdata$unethicalityS5 <- coalesce(OBdata$s5_DV1_uneth_, OBdata$s5_DV1_uneth_.0, OBdata$s5_DV1_uneth_.1)
OBdata$unethicalityS6 <- coalesce(OBdata$s6_DV1_uneth_, OBdata$s6_DV1_uneth_.0, OBdata$s6_DV1_uneth_.1)
OBdata$punishmentS1 <- coalesce(OBdata$S1_DV2_pun_, OBdata$s2_DV2_pun_.0, OBdata$s1_DV2_pun_.1)
OBdata$punishmentS2 <- coalesce(OBdata$S2_DV2_pun_, OBdata$s2_DV2_pun_.0, OBdata$s2_DV2_pun_.1)
OBdata$punishmentS3 <- coalesce(OBdata$s3_DV2_pun_, OBdata$s3_DV2_pun_.0, OBdata$s3_DV2_pun_.1)
OBdata$punishmentS4 <- coalesce(OBdata$s4_DV2_pun_, OBdata$s4_DV2_pun_.0, OBdata$s4_DV2_pun_.1)
OBdata$punishmentS5 <- coalesce(OBdata$s5_DV2_pun_, OBdata$s5_DV2_pun_.0, OBdata$s5_DV2_pun_.1)
OBdata$punishmentS6 <- coalesce(OBdata$s6_DV2_pun_, OBdata$s6_DV2_pun_.0, OBdata$s6_DV2_pun_.1)
OBdata$blameS1 <- coalesce(OBdata$S1_DV3_blame_, OBdata$s1_DV3_blame_.0, OBdata$s1_DV3_blame_.1)
OBdata$blameS2 <- coalesce(OBdata$S2_DV3_blame_, OBdata$s2_DV3_blame_.0, OBdata$s2_DV3_blame_.1)
OBdata$blameS3 <- coalesce(OBdata$s3_DV3_blame_, OBdata$s3_DV3_blame_.0, OBdata$s3_DV3_blame_.1)
OBdata$blameS4 <- coalesce(OBdata$s4_DV3_blame_, OBdata$s4_DV3_blame_.0, OBdata$s4_DV3_blame_.1)
OBdata$blameS5 <- coalesce(OBdata$s5_DV3_blame_, OBdata$s5_DV3_blame_.0, OBdata$s5_DV3_blame_.1)
OBdata$blameS6 <- coalesce(OBdata$s6_DV3_blame_, OBdata$s6_DV3_blame_.0, OBdata$s6_DV3_blame_.1)
OBdata$outcome <- as.factor(OBdata$outcome)
nrows <- nrow(OBdata)
OBDataCondensed <- c(OBdata$unethicalityS1, OBdata$unethicalityS2, OBdata$unethicalityS3, OBdata$unethicalityS4, OBdata$unethicalityS5, OBdata$unethicalityS6, OBdata$punishmentS1, OBdata$punishmentS2, OBdata$punishmentS3, OBdata$punishmentS4, OBdata$punishmentS5, OBdata$punishmentS6, OBdata$blameS1, OBdata$blameS2, OBdata$blameS3, OBdata$blameS4, OBdata$blameS5, OBdata$blameS6 )
OBDataCondensed <- as.data.frame(OBDataCondensed)
dvNames <- c(rep("unethicality",nrows*6),rep("punishment",nrows*6),rep("blame",nrows*6))
OBDataCondensed <- cbind(OBDataCondensed,dvNames)
scenarios <- c(rep(1,nrows),rep(2,nrows),rep(3,nrows),rep(4,nrows),rep(5,nrows),rep(6,nrows))
OBDataCondensed <- cbind(OBDataCondensed,scenarios)
OBDataCondensed <- cbind(OBDataCondensed,rep(OBdata$outcome,18))
OBDataCondensed <- cbind(OBDataCondensed, rep(OBdata$ResponseId,18))
names(OBDataCondensed)[1] <- "Rating"
names(OBDataCondensed)[2] <- "DV"
names(OBDataCondensed)[3] <- "Scenario"
names(OBDataCondensed)[4] <- "Outcome"
names(OBDataCondensed)[5] <- "ID"
OBDataCondensed$scenarioGroup <- ifelse(OBDataCondensed$Scenario<4,"1-3rep","4-6ext")
OBDataCondensed$Rating <- as.numeric(OBDataCondensed$Rating)
OBDataCondensed$Scenario <- as.factor(OBDataCondensed$Scenario)
# DVS by outcome
outcomeTab <- OBDataCondensed %>%
group_by(DV,Outcome,scenarioGroup) %>%
dplyr::mutate(N = n()) %>%
dplyr::summarise(m_N = mean(N),
m_val = mean(Rating),
sd_val = sd(Rating),
min_val = min(Rating),
max_val = max(Rating))
outcomeTab
# DVs by scenario
outcomeFullTab <- OBDataCondensed %>%
group_by(DV,Outcome) %>%
dplyr::mutate(N = n()) %>%
dplyr::summarise(m_N = mean(N),
m_val = mean(Rating),
sd_val = sd(Rating),
min_val = min(Rating),
max_val = max(Rating))
outcomeFullTab
View(OBDataCondensed)
7236/3
2412/6
nrow(OBDataCondensed[OBDataCondensed$DV=="punishment",])
nrow(OBDataCondensed[OBDataCondensed$DV=="blame",])
nrow(OBDataCondensed[OBDataCondensed$DV=="unethicality",])
n(OBDataCondensed[OBDataCondensed$DV=="punishment",])
View(OBDataCondensed)
View(OBdata)
OBdata$punishmentS1
OBdata$punishmentS2
source("Scripts/packageLoad.R")
source_python("Scripts/processFile.py")
## Load Libraries and Python script for processing JSON files##
dataFolder <- "../JSONs"
## 1. Load data from JSON files##
## 2. Create full df with stage-wise data##
## 3. Create aggregate dataframe with participant-wise data##
## 4. Create dataframe for case-wise data##
## 5. Create matrix for information seeking data by case##
df <- data.frame(matrix(ncol = 0, nrow = 1638))
infoStages <- c("Patient History", "Physical Exmination", "Testing")
ids <- list.dirs(dataFolder,recursive = FALSE)
experiencedIDs <- c("qj4vcw","sz5k4r","kqzd96","s8c6kp","j1bwlt", "jhym2l")
cases <-c("UC", "GBS", "TA", "TTP", "AD", "MTB")
conditionsShort <- c("UC", "GBS", "TA", "TTP", "AD", "MTB")
conditionsLong <- c("ULCERATIVE COLITIS", "GUILLAINBARRE SYNDROME", "TEMPORAL ARTERITIS", "THROMBOTIC THROMBOCYTOPENIC PURPURA", "AORTIC DISSECTION", "MILIARY TB")
easyCaseGroup <- c("GBS", "UC", "TA")
hardCaseGroup <- c("AD", "TTP", "MTB")
easyCaseGroupLong <- c("GUILLAINBARRE SYNDROME", "ULCERATIVE COLITIS", "TEMPORAL ARTERITIS")
hardCaseGroupLong <- c("THROMBOTIC THROMBOCYTOPENIC PURPURA", "AORTIC DISSECTION", "MILIARY TB")
accuracyMeasure <- "CorrectLikelihood" #HighestLikelihood, CorrectLikelihood, Differential
classifyVar <- "accuracy" #accuracy or confidence
source("Scripts/AggregateData.R")
~/Documents/ThesisMainProject/Study1DiagData/data/AnalysisScripts/DiagnosisStudyAnalysis.Rmd
View(trials)
View(df)
pptTrials
pptTrials$treatmentPlan!="Not Provided"
unique(c(1,1,1,2,3,4,4))
length(unique(c(1,1,1,2,3,4,4)))
## Load Libraries and Python script for processing JSON files##
dataFolder <- "../JSONs"
## 1. Load data from JSON files##
## 2. Create full df with stage-wise data##
## 3. Create aggregate dataframe with participant-wise data##
## 4. Create dataframe for case-wise data##
## 5. Create matrix for information seeking data by case##
df <- data.frame(matrix(ncol = 0, nrow = 1638))
infoStages <- c("Patient History", "Physical Exmination", "Testing")
ids <- list.dirs(dataFolder,recursive = FALSE)
experiencedIDs <- c("qj4vcw","sz5k4r","kqzd96","s8c6kp","j1bwlt", "jhym2l")
cases <-c("UC", "GBS", "TA", "TTP", "AD", "MTB")
conditionsShort <- c("UC", "GBS", "TA", "TTP", "AD", "MTB")
conditionsLong <- c("ULCERATIVE COLITIS", "GUILLAINBARRE SYNDROME", "TEMPORAL ARTERITIS", "THROMBOTIC THROMBOCYTOPENIC PURPURA", "AORTIC DISSECTION", "MILIARY TB")
easyCaseGroup <- c("GBS", "UC", "TA")
hardCaseGroup <- c("AD", "TTP", "MTB")
easyCaseGroupLong <- c("GUILLAINBARRE SYNDROME", "ULCERATIVE COLITIS", "TEMPORAL ARTERITIS")
hardCaseGroupLong <- c("THROMBOTIC THROMBOCYTOPENIC PURPURA", "AORTIC DISSECTION", "MILIARY TB")
accuracyMeasure <- "CorrectLikelihood" #HighestLikelihood, CorrectLikelihood, Differential
classifyVar <- "accuracy" #accuracy or confidence
source("Scripts/AggregateData.R")
cor <- cor.test(studentAggData$meanInitialDiffs,studentAggData$proportionOfInfo,method="pearson")
diffInfo <- ggplot(data = studentAggData, aes(x=meanInitialDiffs, y=proportionOfInfo)) +
geom_point() +
geom_smooth(method=lm , color=differentialColour, fill="#69b3a2", se=TRUE) +
theme_classic()
title <- paste("Initial Diffs against % of Information Sought: ",
"r(", cor$parameter, ") = ",  round(cor$estimate, 2), ", p = ",  round(cor$p.value,2), sep="")
print(diffInfo +
ggtitle(title)
+ labs(y="Proportion of Possible Information Requested", x = "Number of Initial Differentials")
+theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
plot.title=element_text(size=14,face="bold")
))
cor <- cor.test(studentAggData$meanInitialDiffs,studentAggData$proportionOfInfo,method="pearson")
cor
View(aggData)
?case_when
knitr::opts_chunk$set(echo = TRUE)
# Loading and collating data files
ratingsData <- read.csv("./Johnratings.csv",header=TRUE,sep=",")
title <- paste("Watched Movies by Year", sep="")
lik <- barplot(table(ratingsData$Year),
main=title,
xlab="Release Year",
ylab="Count",
border="black",
col="black",
density=10
)
medYear <- median(ratingsData$Year)
#medYear <- 2000
ratingsData$medGroup <- ifelse(ratingsData$Year>=medYear,2,1)
se <- c(sd(ratingsData[ratingsData$medGroup==1,]$Your.Rating,na.rm=T)/sqrt(length(ratingsData[ratingsData$medGroup==1,]$Your.Rating)),
sd(ratingsData[ratingsData$medGroup==2,]$Your.Rating,na.rm=T)/sqrt(length(ratingsData[ratingsData$medGroup==2,]$Your.Rating)))
xb <- c("Early Films","Recent Films")
yb <- c(mean(ratingsData[ratingsData$medGroup==1,]$Your.Rating,na.rm=T),mean(ratingsData[ratingsData$medGroup==2,]$Your.Rating,na.rm=T))
df <- data.frame("ReleaseYearGroup" = xb, "Rating"= yb)
inf <- ggplot(df) +
geom_bar( aes(x=ReleaseYearGroup, y=Rating), colour="black", stat="identity", fill="darkgreen", alpha=0.5) +
geom_errorbar( aes(x=ReleaseYearGroup, y=Rating, ymin=Rating-se, ymax=Rating+se), colour="orange", alpha=0.9, size=1.1, width = 0.4) +
theme_classic()
print(inf +
ggtitle("Median Split of Release Year on Rating") +
labs(x = "Release Group", y = "Rating"))
print(t.test(ratingsData[ratingsData$medGroup==1,]$Your.Rating,
ratingsData[ratingsData$medGroup==2,]$Your.Rating))
yearRatings <- ggplot(data = ratingsData, aes(x=IMDb.Rating, y=Your.Rating)) +
geom_point() +
geom_smooth(method=lm , color="purple", fill="#69b3a2", se=TRUE) +
theme_classic()
print(yearRatings +
ggtitle("IMDb Score Against Rating")
+ labs(x="Consensus IMDb Rating", y = "John's Rating"))
cor.test(ratingsData$IMDb.Rating,ratingsData$Your.Rating,method="pearson")
yearRatings <- ggplot(data = ratingsData, aes(x=Runtime..mins., y=Your.Rating)) +
geom_point() +
geom_smooth(method=lm , color="red", fill="#69b3a2", se=TRUE) +
theme_classic()
print(yearRatings +
ggtitle("Runtime Against Rating")
+ labs(x="Duration (minutes)", y = "John's Rating"))
cor.test(ratingsData$Runtime..mins.,ratingsData$Your.Rating,method="pearson")
yearRatings <- ggplot(data = ratingsData, aes(x=IMDb.Rating, y=Your.Rating)) +
geom_point() +
geom_smooth(method=lm , color="purple", fill="#69b3a2", se=TRUE) +
ylim(0,10) +
theme_classic()
print(yearRatings +
ggtitle("IMDb Score Against Rating")
+ labs(x="Consensus IMDb Rating", y = "John's Rating"))
cor.test(ratingsData$IMDb.Rating,ratingsData$Your.Rating,method="pearson")
ratingsData[ratingsData$IMDb.Rating<4,]$Title
ratingsData[ratingsData$IMDb.Rating<4,]$Title
