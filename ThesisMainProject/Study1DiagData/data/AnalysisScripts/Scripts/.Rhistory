geom_text(aes(label = tests),position = position_dodge(0.9), size = 2, angle = 90, hjust = 1) +
labs(y="Information Seeking Proportion", x = paste("Participant ", classifyVar, sep=""))
infoPropValues <- as.array(c(sort(infoSeekingProps[1,],decreasing=TRUE),
sort(infoSeekingProps[2,],decreasing=TRUE),
sort(infoSeekingProps[3,],decreasing=TRUE),
sort(infoSeekingProps[4,],decreasing=TRUE),
sort(infoSeekingProps[5,],decreasing=TRUE)))
repN <- ncol(infoSeekingProps)
accGroupL <- c(rep(1, repN),rep(2, repN),rep(3, repN),rep(4, repN),rep(5, repN))
tests <- c(colnames(sort(infoSeekingProps[1,],decreasing=TRUE)),
colnames(sort(infoSeekingProps[2,],decreasing=TRUE)),
colnames(sort(infoSeekingProps[3,],decreasing=TRUE)),
colnames(sort(infoSeekingProps[4,],decreasing=TRUE)),
colnames(sort(infoSeekingProps[5,],decreasing=TRUE)))
ranks <- c(rep(c(1:repN),5))
testIdx <- c(rep(0,length(repN*5)))
infoPropDf <- data.frame(infoPropValues,accGroupL,tests,ranks,testIdx)
testCodes <- c("PULSE", "BP", "RESP", "LUNG", "HEART", "EYES", "TEMP",
"ABDEX", "REC", "NECK", "HEAD", "NEURO", "EXTR",
"URINE", "ECG", "ABCT", "VBG", "ELEC", "CRP", "CLOT", "FBC",
"BIOCH", "CHXR")
for (testNum in 7:29)
{
testStr <- paste("T", testNum, sep="")
infoPropDf[infoPropDf$tests==testStr,]$testIdx <- testNum-6
infoPropDf[infoPropDf$tests==testStr,]$tests <- testCodes[testNum-6]
}
ggplot(infoPropDf, aes(x = as.numeric(accGroupL), y = as.double(infoPropValues), fill = tests, group=ranks)) +
geom_bar(position="dodge", stat="identity") +
#scale_fill_viridis(discrete=T) +
geom_text(aes(label = tests),position = position_dodge(0.9), size = 2, angle = 90, hjust = 1) +
labs(y="Information Seeking Proportion", x = paste("Participant ", classifyVar, sep=""))
testSimAcc <- data.frame(matrix(ncol=5,nrow=5))
colnames(testSimAcc) <- c("accGroup1","accGroup2","accGroup3","accGroup4")
rownames(testSimAcc) <- c("accGroup1","accGroup2","accGroup3","accGroup4")
View(infoPropDf)
testSimAcc <- data.frame(matrix(ncol=5,nrow=5))
colnames(testSimAcc) <- c("accGroup1","accGroup2","accGroup3","accGroup4","exp")
rownames(testSimAcc) <- c("accGroup1","accGroup2","accGroup3","accGroup4","exp")
for (x in 1:5)
{
for (y in 1:5)
{
if (x == y)
{
testSimAcc[x,y] <- 0
}
else
{
testSimAcc[x,y] <- kendallTauDistance(infoPropDf[infoPropDf$accGroupL==x,]$testIdx,
infoPropDf[infoPropDf$accGroupL==y,]$testIdx)
}
}
}
View(testSimAcc)
kendallTauDistance <- function(x,y){
n <- length(x)
ub <- (0.5*n)*(n-1)
return(1-(inversionNumber(order(x)[rank(y)])/ub))
}
testSimAcc <- data.frame(matrix(ncol=5,nrow=5))
colnames(testSimAcc) <- c("accGroup1","accGroup2","accGroup3","accGroup4","exp")
rownames(testSimAcc) <- c("accGroup1","accGroup2","accGroup3","accGroup4","exp")
for (x in 1:5)
{
for (y in 1:5)
{
if (x == y)
{
testSimAcc[x,y] <- 0
}
else
{
testSimAcc[x,y] <- kendallTauDistance(infoPropDf[infoPropDf$accGroupL==x,]$testIdx,
infoPropDf[infoPropDf$accGroupL==y,]$testIdx)
}
}
}
View(testSimAcc)
View(infoPropDf)
infoValueTable <- temp[,7:29]
if (classifyVar == "confidence")
{
infoValueTable <- infoValueTable[grepl("confGroup4", rownames(infoValueTable)),]
} else {
infoValueTable <- infoValueTable[grepl("accGroup4", rownames(infoValueTable)),]
}
infoSeekingHighAccGroup <- colSums(infoValueTable==0)
infoSeekingHighAccGroup <- nrow(infoValueTable)-infoSeekingHighAccGroup
commonTests <- allTests[order(infoSeekingHighAccGroup,decreasing=TRUE)[1:5]+6]
infoVector <- integer(ncol(infoValueTable))
for (ppt in 1:85)
{
pptTrials <- infoValueTable[grepl(paste("p",ppt,"-a",sep=""), rownames(infoValueTable), ignore.case = FALSE),]
if (nrow(pptTrials) > 1)
{
for (x in 1:ncol(pptTrials))
{
vals <- pptTrials[,x]
if (sum(vals>0) > 4)
{
infoVector[x] <- infoVector[x]+1
}
}
}
}
vals
pptTrials
infoValueTable <- temp[,7:29]
if (classifyVar == "confidence")
{
infoValueTable <- infoValueTable[grepl("confGroup4", rownames(infoValueTable)),]
} else {
infoValueTable <- infoValueTable[grepl("accGroup4", rownames(infoValueTable)),]
}
infoSeekingHighAccGroup <- colSums(infoValueTable==0)
infoSeekingHighAccGroup <- nrow(infoValueTable)-infoSeekingHighAccGroup
commonTests <- allTests[order(infoSeekingHighAccGroup,decreasing=TRUE)[1:5]+6]
commonTests
View(infoSeekingFullMatrix)
infoValueTable <- infoSeekingFullMatrix[,7:29]
if (classifyVar == "confidence")
{
infoValueTable <- infoValueTable[grepl("confGroup4", rownames(infoValueTable)),]
} else {
infoValueTable <- infoValueTable[grepl("accGroup4", rownames(infoValueTable)),]
}
infoSeekingHighAccGroup <- colSums(infoValueTable==0)
infoSeekingHighAccGroup <- nrow(infoValueTable)-infoSeekingHighAccGroup
commonTests <- allTests[order(infoSeekingHighAccGroup,decreasing=TRUE)[1:5]+6]
commonTests
infoPropDf[infoPropDf$accGroupL==x,]$testIdx
infoPropDf[infoPropDf$accGroupL==y,]$testIdx
nPpts <- nrow(infoSeekingDf)/4
accs <- c("accGroup1", "accGroup2", "accGroup3", "accGroup4", "e")
#if (classifyVar == "confidence")
#{
#  accs <- c("confGroup1", "confGroup2", "confGroup3", "confGroup4")
#} else {
#  accs <- c("accGroup1", "accGroup2", "accGroup3", "accGroup4")
#}
cases <-c("UC", "GBS", "TA", "TTP", "AD", "MTB")
ppts <- c("p", "e")
numOfClusters <- 4# 2: initial correctness, 3: case difficulty, 4: ppt accuracy, 6: case
clusterType <- "pam"
source("Scripts/InfoSeekingMDS.R")
######################################
cor <- cor.test(infoSeekingDf$MDSDistanceVariance,infoSeekingDf$RelativeRationalism,method="pearson")
diffCon <- ggplot(data = infoSeekingDf, aes(x=RelativeRationalism, y=MDSDistanceVariance)) +
geom_point() +
geom_smooth(method=lm , color=infoSeekingColour, fill="#69b3a2", se=TRUE) +
theme_classic()
title <- paste("MSD Distance Variance against Relative Rationalism: ",
"r(", cor$parameter, ") = ",  round(cor$estimate, 2), ", p = ",  round(cor$p.value,2), sep="")
print(diffCon +
ggtitle(title)
+ labs(y="MSD Distance Variance", x = "Relative Rationalism")
+theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
plot.title=element_text(size=18)
))
View(varDfTemp)
meanfun <- function(data, i){
d <- data[i, ]
return(mean(d))
}
sample(c(1,2,3,4,5), 2, replace = TRUE)
sample(c(1,2,3,4,5), size = 2, 2 replace = TRUE)
sample(c(1,2,3,4,5), size = 2, 2, replace = TRUE)
sample(c(1,2,3,4,5), n = 2, size = 2, replace = TRUE)
sample.int(c(1,2,3,4,5), n = 2, size = 2, replace = TRUE)
sample.int(c(1,2,3,4,5),size = 2, replace = TRUE)
sample.int(c(1,2,3,4,5),size = 67, replace = TRUE)
sample(c(1,2,3,4,5),size = 67, replace = TRUE)
subsample <- function(x,n,r) {
returnDf <- data.frame(matrix(ncol=n,nrow=r))
returnArr <- c()
for (iter in 1:r)
{
for (num in 1:n)
{
returnArr <- c(returnArr,sample(x,size = 1,replace = FALSE))
}
returnDf[,r] <- returnArr
}
}
testArray <- c(1,2,3,4,5,6,7,8,9)
subsample <- function(x,n,r) {
returnDf <- data.frame(matrix(ncol=n,nrow=r))
returnArr <- c()
for (iter in 1:r)
{
for (num in 1:n)
{
returnArr <- c(returnArr,sample(x,size = 1,replace = FALSE))
}
returnDf[,r] <- returnArr
}
return(returnDf)
}
subsample(testArray,3,10)
subsample <- function(x,n,r) {
returnDf <- data.frame(matrix(ncol=n,nrow=r))
returnArr <- c()
for (iter in 1:r)
{
for (num in 1:n)
{
sampleArr <- x
returnArr <- c(returnArr,sample(sampleArr,size = 1,replace = FALSE))
}
returnDf[,r] <- returnArr
}
return(returnDf)
}
subsample <- function(x,n,r) {
returnDf <- data.frame(matrix(ncol=n,nrow=r))
returnArr <- c()
for (iter in 1:r)
{
sampleArr <- x
returnArr <- c(returnArr,sample(sampleArr,size = n,replace = FALSE))
returnDf[,r] <- returnArr
}
return(returnDf)
}
subsample(testArray,3,10)
sample(testArray,size = n,replace = FALSE)
n
n = 3
n
sample(testArray,size = n,replace = FALSE)
subsample <- function(x,n,r) {
returnDf <- data.frame(matrix(ncol=n,nrow=r))
returnArr <- c()
for (iter in 1:r)
{
sampleArr <- x
returnArr <- sample(sampleArr,size = n,replace = FALSE)
returnDf[,r] <- returnArr
}
return(returnDf)
}
sample(testArray,size = n,replace = FALSE)
subsample(testArray,3,10)
subsample <- function(x,n,r) {
returnDf <- data.frame(matrix(ncol=n,nrow=r))
returnArr <- c()
for (iter in 1:r)
{
sampleArr <- x
returnArr <- sample(sampleArr,size = n,replace = FALSE)
returnDf[,iter] <- returnArr
}
return(returnDf)
}
subsample(testArray,3,10)
returnDf <- data.frame(matrix(ncol=n,nrow=r))
n = 3
r = 10
returnDf <- data.frame(matrix(ncol=n,nrow=r))
View(returnDf)
returnDf[,1]
View(returnDf)
subsample <- function(x,n,r) {
returnDf <- data.frame(matrix(ncol=n,nrow=r))
for (iter in 1:r)
{
sampleArr <- x
returnArr <- sample(sampleArr,size = n,replace = FALSE)
returnDf[iter,] <- returnArr
}
return(returnDf)
}
subsample(testArray,3,10)
View(varDf)
View(varDfTemp)
subsample(varDfTemp[varDfTemp$accGroups==1,]$infoSeekVector,6,10)
accVarGroup1 <- subsample(varDfTemp[varDfTemp$accGroups==1,]$infoSeekVector,6,10)
accVarGroup1$meanVar <- rowMeans(accVarGroup1,na.rm=T)
View(accVarGroup1)
accVarGroup2 <- subsample(varDfTemp[varDfTemp$accGroups==2,]$infoSeekVector,6,10)
accVarGroup2$meanVar <- rowMeans(accVarGroup2,na.rm=T)
View(accVarGroup2)
accVarGroup3 <- subsample(varDfTemp[varDfTemp$accGroups==3,]$infoSeekVector,6,10)
accVarGroup3$meanVar <- rowMeans(accVarGroup3,na.rm=T)
accVarGroup4 <- subsample(varDfTemp[varDfTemp$accGroups==4,]$infoSeekVector,6,10)
accVarGroup4$meanVar <- rowMeans(accVarGroup4,na.rm=T)
View(accVarGroup3)
View(accVarGroup4)
mean(accVarGroup1$meanVar)
mean(accVarGroup2$meanVar)
mean(accVarGroup3$meanVar)
mean(accVarGroup4$meanVar)
condisc <- function(x){
std.loadings<- inspect(x, what="std")$lambda
#std.loadings
std.loadings[std.loadings==0] <- NA
#std.loadings
std.loadings <- std.loadings^2
#std.loadings
ave <- colMeans(std.loadings, na.rm=TRUE)
#ave
#factor correlation matrix
fcor <- lavInspect(x, "cor.lv")
#fcor
sqfcor <- fcor^2
#sqfcor
list(Squared_Factor_Correlation=round(sqfcor, digits=3),
Average_Variance_Extracted=round(ave, digits=3))
}
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
source(paste(wd, '/packageLoad.R', sep=""))
dataPath <- paste(wd, "/../../Data/", sep="")
# Grab the original data of the initial 83 questions
# First find our current working directory
path <- paste(dataPath, "IntSysNums.csv", sep="")
origData <- read.csv(path, header=TRUE, sep=",")
# Convert tibble to dataframe
origData <- as.data.frame(origData)
# Grab the column headers (questions) before changing to simpler names
origQuestions <- colnames(origData, do.NULL = TRUE, prefix = "col")
# Make an array of factor strings from y1 to y83
newCols = c()
for (x in 1:83)
{
newCols[x] <- paste("y", as.character(x), sep="")
}
# Change column names (makes indexing later much easier) to y1,y2,...y83
colnames(origData) <- newCols
# Reverse scored questions adjusted
reverses <- c(2,3,8,14,15,16,17,26,27,29,30,32,33,38,40,41,45,49,66,67,76,77,78)
for (val in reverses)
{
origData[1:200,val] <- 8 - origData[1:200,val]
}
path <- paste(dataPath, "IntSysValidate2Nums3.csv", sep="")
model3data2 <- read.csv(path, header=TRUE, sep=",")
model3data2 <- as.data.frame(model3data2)
questions3 <- colnames(model3data2, do.NULL = TRUE, prefix = "col")
colnames(model3data2) <- c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10", "x11", "x12", "RT", "Age", "Gender")
reverses <- c(5,6,7,8,11)
nrows <- nrow(model3data2)
for (val in reverses)
{
model3data2[1:nrows,val] <- 8 - model3data2[1:nrows,val]
}
# Compute score total columns and age group label.
model3data2 <- cbind(model3data2, Total = rowSums(model3data2[1:12]))
model3data2 <- cbind(model3data2, AbilityTotal = rowSums(model3data2[1:4]))
model3data2 <- cbind(model3data2, IntegrityTotal = rowSums(model3data2[5:8]))
model3data2 <- cbind(model3data2, UnderstandingTotal = rowSums(model3data2[9:12]))
model3data2 <- transform(model3data2, AgeGroup= ifelse(Age>25, "Over 25", "25 or Under"))
path <- paste(dataPath, "IntSysValidate2Nums3.csv", sep="")
model3data2 <- read.csv(path, header=TRUE, sep=",")
model3data2 <- as.data.frame(model3data2)
questions3 <- colnames(model3data2, do.NULL = TRUE, prefix = "col")
colnames(model3data2) <- c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10", "x11", "x12", "RT", "Age", "Gender")
reverses <- c(5,6,7,8,11)
nrows <- nrow(model3data2)
for (val in reverses)
{
model3data2[1:nrows,val] <- 8 - model3data2[1:nrows,val]
}
# Compute score total columns and age group label.
model3data2 <- cbind(model3data2, Total = rowSums(model3data2[1:12]))
model3data2 <- cbind(model3data2, AbilityTotal = rowSums(model3data2[1:4]))
model3data2 <- cbind(model3data2, IntegrityTotal = rowSums(model3data2[5:8]))
model3data2 <- cbind(model3data2, UnderstandingTotal = rowSums(model3data2[9:12]))
model3data2 <- transform(model3data2, AgeGroup= ifelse(Age>25, "Over 25", "25 or Under"))
dataPath <- paste(wd, "/../../Data/", sep="")
path <- paste(dataPath, "IntSysValidate2Nums3.csv", sep="")
model3data2 <- read.csv(path, header=TRUE, sep=",")
model3data2 <- as.data.frame(model3data2)
questions3 <- colnames(model3data2, do.NULL = TRUE, prefix = "col")
colnames(model3data2) <- c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10", "x11", "x12", "RT", "Age", "Gender")
reverses <- c(5,6,7,8,11)
nrows <- nrow(model3data2)
for (val in reverses)
{
model3data2[1:nrows,val] <- 8 - model3data2[1:nrows,val]
}
# Compute score total columns and age group label.
model3data2 <- cbind(model3data2, Total = rowSums(model3data2[1:12]))
model3data2 <- cbind(model3data2, AbilityTotal = rowSums(model3data2[1:4]))
model3data2 <- cbind(model3data2, IntegrityTotal = rowSums(model3data2[5:8]))
model3data2 <- cbind(model3data2, UnderstandingTotal = rowSums(model3data2[9:12]))
model3data2 <- transform(model3data2, AgeGroup= ifelse(Age>25, "Over 25", "25 or Under"))
View(model3data2)
requiredPackages <- c("lavaan", "psych", "nFactors", "FactoMineR", "corrplot", "cocor", "ltm", "stringr", "ggplot2", "EFAtools", "tidySEM", "semTools", "devtools")
new.packages <- requiredPackages[!(requiredPackages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(requiredPackages, require, character.only = TRUE)
source("http://www.sthda.com/upload/rquery_cormat.r")
path <- paste(dataPath, "IntSysValidate2Nums3.csv", sep="")
model3data2 <- read.csv(path, header=TRUE, sep=",")
model3data2 <- as.data.frame(model3data2)
questions3 <- colnames(model3data2, do.NULL = TRUE, prefix = "col")
colnames(model3data2) <- c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10", "x11", "x12", "RT", "Age", "Gender")
reverses <- c(5,6,7,8,11)
nrows <- nrow(model3data2)
for (val in reverses)
{
model3data2[1:nrows,val] <- 8 - model3data2[1:nrows,val]
}
# Compute score total columns and age group label.
model3data2 <- cbind(model3data2, Total = rowSums(model3data2[1:12]))
model3data2 <- cbind(model3data2, AbilityTotal = rowSums(model3data2[1:4]))
model3data2 <- cbind(model3data2, IntegrityTotal = rowSums(model3data2[5:8]))
model3data2 <- cbind(model3data2, UnderstandingTotal = rowSums(model3data2[9:12]))
model3data2 <- transform(model3data2, AgeGroup= ifelse(Age>25, "Over 25", "25 or Under"))
model3data2$Gender <- as.factor(model3data2$Gender)
model3data2$AgeGroup <- as.factor(model3data2$AgeGroup)
HS.model3 <- ' ability  =~ x1 + x2 + x3 + x4
integrity =~ x5 + x6 + x7 + x8
understanding =~ x9 + x10 + x11 + x12'
# fit the model
fit3 <- cfa(HS.model3, data=model3data2, se="bootstrap")
comp_reliability(fit3)
install.packages("remotes")
remotes::install_github("jsaraviadrago/bluegrafi")
comp_reliability(fit3)
reliability(fit3)
inspect(fit3,what="std")$lambda
condisc(fit3)
model3data2[1:12,]
mlfit <- factanal(model3data2[,1:12], 3, rotation="promax")
print(mlfit, digits=4)
mlfit$loadings
mlfit$loadings[1]
mlfit$loadings[,1]
mean(mlfit$loadings[,1])
mean(mlfit$loadings[,2])
mean(mlfit$loadings[,3])
condisc(fit3)
reliability(fit3)
path <- paste(dataPath, "IntSysValidate2Nums1.csv", sep="")
model1data2 <- read.csv(path, header=TRUE, sep=",")
model1data2 <- as.data.frame(model1data2)
questions1 <- colnames(model1data2, do.NULL = TRUE, prefix = "col")
colnames(model1data2) <- c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "RT", "Age", "Gender")
# Questions that need reverse scoring
reverses <- c(3,4)
nrows <- nrow(model1data2)
for (val in reverses)
{
model1data2[1:nrows,val] <- 8 - model1data2[1:nrows,val]
}
model1data2 <- cbind(model1data2, Total = rowSums(model1data2[1:8]))
model1data2 <- transform(model1data2, AgeGroup= ifelse(Age>25, "Over 25", "25 or Under"))
HS.model1 <- ' trust  =~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8'
# fit the model
fit1 <- cfa(HS.model1, data=model1data2, se="bootstrap")
reliability(fit1)
reliability(fit3)
reliability(fit3)
condisc(fit3)
source('scripts_and_filters/install_packages_if_missing.R')
update.packages(ask = FALSE, checkBuilt = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
tinytex::reinstall_tinytex()
library(xfun, lib.loc = "/Library/Frameworks/R.framework/Versions/4.1/Resources/library")
library(xfun, lib.loc = "/Library/Frameworks/R.framework/Versions/4.1/Resources/library")
uninstall.packages("xfun")
library(installr)
install.packages(installr)
install.packages("installr")
library(installr)
uninstall.packages("xfun")
install.packages("xfun")
install.packages("xfun")
tinytex::reinstall_tinytex()
uninstall.packages("xfun")
remove.packages("xfun", lib="/Library/Frameworks/R.framework/Versions/4.1/Resources/library")
install.packages("xfun")
install.packages("xfun")
tinytex::reinstall_tinytex()
detach(package:xfun, unload = TRUE)
tinytex::tlmgr_update()
update.packages(ask = FALSE, checkBuilt = TRUE)
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
tinytex::tlmgr_update()
library(xfun)
tinytex::tlmgr_update()
source('scripts_and_filters/install_packages_if_missing.R')
library(xfun)
tinytex::tlmgr_update()
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
library(tinytex)
tinytex::tlmgr_update()
library(xfun)
install.packages("xfun")
install.packages("xfun")
library(xfun)
tinytex::reinstall_tinytex()
remotes::install_github('rstudio/tinytex')
tinytex::tlmgr_update()
install.packages("xfun")
install.packages("xfun")
library("xfun")
tinytex::tlmgr_update()
library(tinytex, lib.loc = "/Library/Frameworks/R.framework/Versions/4.1/Resources/library")
tinytex::tlmgr_update()
tlmgr_update()
options(tinytex.verbose = TRUE)
tinytex::reinstall_tinytex()
