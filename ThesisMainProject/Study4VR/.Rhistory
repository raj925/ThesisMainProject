legend.title=element_text(size=16),
legend.text=element_text(size=16))
print(intplot)
intplot <- interact_plot(model, pred = initialDiagnoses, modx = classifiedStrat, standardize=T) +
labs(y="Accuracy", x = "Initial Diagnoses", colour = "Reasoning Strategy") +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.title=element_text(size=16),
legend.text=element_text(size=16))
print(intplot)
intplot <- interact_plot(model, pred = initialDiagnoses, modx = classifiedStrat, standardize=TRUE) +
labs(y="Accuracy", x = "Initial Diagnoses", colour = "Reasoning Strategy") +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.title=element_text(size=16),
legend.text=element_text(size=16))
print(intplot)
library(interactions)
intplot <- interact_plot(model, pred = initialDiagnoses, modx = classifiedStrat, robust=TRUE) +
labs(y="Accuracy", x = "Initial Diagnoses", colour = "Reasoning Strategy") +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.title=element_text(size=16),
legend.text=element_text(size=16))
print(intplot)
model <- lm(LikelihoodAcc ~ classifiedStrat*initialDiagnoses*infoAmount,data=testingDataStrats)
summary(model)
library(interactions)
intplot <- interact_plot(model, pred = initialDiagnoses, modx = classifiedStrat) +
labs(y="Accuracy", x = "Initial Diagnoses", colour = "Reasoning Strategy") +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.title=element_text(size=16),
legend.text=element_text(size=16))
print(intplot)
model <- lm(confidenceChange ~ classifiedStrat*infoAmount,data=testingDataStrats)
summary(model)
library(interactions)
intplot <- interact_plot(model, pred = infoAmount, modx = classifiedStrat) +
labs(y="Confidence Change", x = "Info Seeking", colour = "Reasoning Strategy") +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.title=element_text(size=16),
legend.text=element_text(size=16))
print(intplot)
library(interactions)
intplot <- interact_plot(model, pred = infoAmount, modx = classifiedStrat, plot.points = TRUE) +
labs(y="Confidence Change", x = "Info Seeking", colour = "Reasoning Strategy") +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.title=element_text(size=16),
legend.text=element_text(size=16))
print(intplot)
intplot <- interact_plot(model, pred = initialDiagnoses, modx = classifiedStrat, plot.points = TRUE) +
labs(y="Accuracy", x = "Initial Diagnoses", colour = "Reasoning Strategy") +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.title=element_text(size=16),
legend.text=element_text(size=16))
model <- lm(LikelihoodAcc ~ classifiedStrat*initialDiagnoses,data=testingDataStrats)
summary(model)
library(interactions)
intplot <- interact_plot(model, pred = initialDiagnoses, modx = classifiedStrat, plot.points = TRUE) +
labs(y="Accuracy", x = "Initial Diagnoses", colour = "Reasoning Strategy") +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.title=element_text(size=16),
legend.text=element_text(size=16))
print(intplot)
model <- lm(confidenceChange ~ classifiedStrat*infoAmount,data=testingDataStrats)
summary(model)
library(interactions)
intplot <- interact_plot(model, pred = infoAmount, modx = classifiedStrat) +
labs(y="Confidence Change", x = "Info Seeking", colour = "Reasoning Strategy") +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.title=element_text(size=16),
legend.text=element_text(size=16))
print(intplot)
modelData <- testingDataStrats[testingDataStrats$classifiedStrat=="HD",]
model <- lmerTest::lmer(confidenceChange ~ initialDiagnoses + infoAmount + (1 | Condition) + (1 | ID), data=modelData)
summary(model)
modelData <- testingDataStrats[testingDataStrats$classifiedStrat=="PR",]
model <- lmerTest::lmer(confidenceChange ~ initialDiagnoses + infoAmount + (1 | Condition) + (1 | ID), data=modelData)
summary(model)
modelData <- testingDataStrats[testingDataStrats$classifiedStrat=="SI",]
model <- lmerTest::lmer(confidenceChange ~ initialDiagnoses + infoAmount + (1 | Condition) + (1 | ID), data=modelData)
summary(model)
modelData <- testingDataStrats[testingDataStrats$classifiedStrat=="HD",]
model <- lmerTest::lmer(confidenceChange ~ initialDiagnoses + infoAmount + (1 | Condition) + (1 | ID), data=modelData)
summary(model)
modelData <- testingDataStrats[testingDataStrats$classifiedStrat=="PR",]
model <- lmerTest::lmer(confidenceChange ~ initialDiagnoses + infoAmount + (1 | Condition) + (1 | ID), data=modelData)
summary(model)
modelData <- testingDataStrats[testingDataStrats$classifiedStrat=="HD",]
model <- lmerTest::lmer(confidenceChange ~ initialDiagnoses*infoAmount + (1 | Condition) + (1 | ID), data=modelData)
summary(model)
modelData <- testingDataStrats[testingDataStrats$classifiedStrat=="PR",]
model <- lmerTest::lmer(confidenceChange ~ initialDiagnoses*infoAmount + (1 | Condition) + (1 | ID), data=modelData)
summary(model)
modelData <- testingDataStrats[testingDataStrats$classifiedStrat=="SI",]
model <- lmerTest::lmer(confidenceChange ~ initialDiagnoses*infoAmount + (1 | Condition) + (1 | ID), data=modelData)
summary(model)
modelData <- testingDataStrats[testingDataStrats$classifiedStrat=="HD",]
model <- lmerTest::lmer(confidenceChange ~ initialDiagnoses + infoAmount + value + (1 | Condition) + (1 | ID), data=modelData)
summary(model)
modelData <- testingDataStrats[testingDataStrats$classifiedStrat=="PR",]
model <- lmerTest::lmer(confidenceChange ~ initialDiagnoses + infoAmount + value + (1 | Condition) + (1 | ID), data=modelData)
summary(model)
modelData <- testingDataStrats[testingDataStrats$classifiedStrat=="SI",]
model <- lmerTest::lmer(confidenceChange ~ initialDiagnoses + infoAmount + value + (1 | Condition) + (1 | ID), data=modelData)
summary(model)
modelData <- testingDataStrats[testingDataStrats$classifiedStrat=="SI",]
model <- lmerTest::lmer(confidenceChange ~ initialDiagnoses + infoAmount + (1 | Condition) + (1 | ID), data=modelData)
summary(model)
modelData <- testingDataStrats[testingDataStrats$classifiedStrat=="PR",]
model <- lmerTest::lmer(confidenceChange ~ initialDiagnoses + infoAmount + (1 | Condition) + (1 | ID), data=modelData)
summary(model)
modelData <- testingDataStrats[testingDataStrats$classifiedStrat=="HD",]
model <- lmerTest::lmer(confidenceChange ~ initialDiagnoses + infoAmount + (1 | Condition) + (1 | ID), data=modelData)
summary(model)
modelData <- testingDataStrats[testingDataStrats$classifiedStrat=="HD",]
model <- lmerTest::lmer(confidenceChange ~ initialDiagnoses + infoAmount + differentialChange + (1 | Condition) + (1 | ID), data=modelData)
summary(model)
modelData <- testingDataStrats[testingDataStrats$classifiedStrat=="HD",]
model <- lmerTest::lmer(confidenceChange ~ differentialChange + infoAmount + (1 | Condition) + (1 | ID), data=modelData)
summary(model)
modelData <- testingDataStrats[testingDataStrats$classifiedStrat=="HD",]
model <- lmerTest::lmer(confidenceChange ~ initialDiagnoses + infoAmount + (1 | Condition) + (1 | ID), data=modelData)
summary(model)
modelData <- testingDataStrats[testingDataStrats$classifiedStrat=="PR",]
model <- lmerTest::lmer(confidenceChange ~ initialDiagnoses + infoAmount + (1 | Condition) + (1 | ID), data=modelData)
summary(model)
modelData <- testingDataStrats[testingDataStrats$classifiedStrat=="SI",]
model <- lmerTest::lmer(confidenceChange ~ initialDiagnoses + infoAmount + (1 | Condition) + (1 | ID), data=modelData)
summary(model)
model <- lmerTest::lmer(confidenceChange ~ initialDiagnoses + infoAmount + (1 | Condition) + (1 | ID), data=modelData)
summary(model)
modelData <- testingDataStrats[testingDataStrats$classifiedStrat=="PR",]
model <- lmerTest::lmer(confidenceChange ~ initialDiagnoses + infoAmount + (1 | Condition) + (1 | ID), data=modelData)
summary(model)
modelData <- testingDataStrats[testingDataStrats$classifiedStrat=="SI",]
model <- lmerTest::lmer(confidenceChange ~ initialDiagnoses + infoAmount + (1 | Condition) + (1 | ID), data=modelData)
summary(model)
model <- lm(confidenceChange ~ classifiedStrat*infoAmount,data=testingDataStrats)
summary(model)
model <- lm(LikelihoodAcc ~ classifiedStrat*initialDiagnoses,data=testingDataStrats)
summary(model)
library(interactions)
intplot <- interact_plot(model, pred = initialDiagnoses, modx = classifiedStrat) +
labs(y="Accuracy", x = "Initial Diagnoses", colour = "Reasoning Strategy") +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.title=element_text(size=16),
legend.text=element_text(size=16))
print(intplot)
contrasts(testingDataStrats$classifiedStrat) <- contr.treatment(levels(testingDataStrats$classifiedStrat), base = which(levels(testingDataStrats$classifiedStrat) == "PR"))
model <- lm(confidenceChange ~ classifiedStrat*infoAmount,data=testingDataStrats)
summary(model)
library(interactions)
intplot <- interact_plot(model, pred = infoAmount, modx = classifiedStrat) +
labs(y="Confidence Change", x = "Info Seeking", colour = "Reasoning Strategy") +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.title=element_text(size=16),
legend.text=element_text(size=16))
print(intplot)
contrasts(testingDataStrats$classifiedStrat) <- contr.treatment(levels(testingDataStrats$classifiedStrat), base = which(levels(testingDataStrats$classifiedStrat) == "SI"))
model <- lm(confidenceChange ~ classifiedStrat*infoAmount,data=testingDataStrats)
summary(model)
library(interactions)
intplot <- interact_plot(model, pred = infoAmount, modx = classifiedStrat) +
labs(y="Confidence Change", x = "Info Seeking", colour = "Reasoning Strategy") +
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16),
legend.title=element_text(size=16),
legend.text=element_text(size=16))
print(intplot)
knitr::opts_chunk$set(echo = TRUE)
####################################################################################################################
## Load Libraries ##
pathSource <- paste("./packageLoad.R", sep="")
source(pathSource)
####################################################################################################################
## Load data from experiment files ##
mainFolder <- ("..")
# Data from experiment 1 (reliability series)
pathR <- paste(mainFolder, "/Raw Data/", 'ReliabilitySeriesFullDataset.csv', sep="")
trialsRel <- read.csv(pathR, header=TRUE, sep=",")
trialsRel <- as.data.frame(trialsRel)
# Data from experiment 2 (difficulty series)
pathD <- paste(mainFolder, "/Raw Data/", 'DifficultySeriesFullDataset.csv', sep="")
trialsDiff <- read.csv(pathD, header=TRUE, sep=",")
trialsDiff <- as.data.frame(trialsDiff)
# Data from experiment 3 (task type series)
pathT <- paste(mainFolder, "/Raw Data/", 'TaskTypesFullDataset.csv', sep="")
trialsTasks <- read.csv(pathT, header=TRUE, sep=",")
trialsTasks <- as.data.frame(trialsTasks)
####################################################################################################################
### ANOVA Figures and Statistics ###
# Run this code
# This function is used for the violin plots to calculate the values for the box plots within
data_summary <- function(x) {
m <- mean(x)
ymin <- m-sd(x)
ymax <- m+sd(x)
return(c(y=m,ymin=ymin,ymax=ymax))
}
####################################################################################################################
## Aggregate Dataframe Initialisation ##
# Look at the number of unique ids to find the number of participants in each experiment
npptsR <- length(unique(trialsRel$ID))
npptsD <- length(unique(trialsDiff$ID))
npptsT <- length(unique(trialsTasks$ID))
# Initialise data frame of aggregate data.
expdataRel <- data.frame(matrix(ncol = 0, nrow = npptsR))
expdataDiff <- data.frame(matrix(ncol = 0, nrow = npptsD))
expdataTasks <- data.frame(matrix(ncol = 0, nrow = npptsT))
## Calculate and add fields to aggregate dataframe ##
# This dataframe will contain all our main values for agreement, influence etc
pathSource <- paste("./DataframeAggregateFieldCalc.R", sep="")
source(pathSource)
####################################################################################################################
### ANOVA Dataframe Creation ###
# Create seperate subsets of the main dataframe for each experiment series
# and each experiment between-subjects manipulation condition.
relFB <- expdataRel[expdataRel$Experiment=="Feedback",] # Experiment 1, Feedback version
relNFB <- expdataRel[expdataRel$Experiment=="NoFeedback",] # Experiment 1, Non-feedback version
diffFB <- expdataDiff[expdataDiff$Experiment=="Feedback",] # Experiment 2, Feedback version
diffNFB <- expdataDiff[expdataDiff$Experiment=="NoFeedback",] # Experiment 2, Non-feedback version
tasksJudge <- expdataTasks[expdataTasks$Condition=="binary",] # Experiment 3, Judgement task version
tasksEst <- expdataTasks[expdataTasks$Condition=="continuous",] # Experiment 3, Estimation task version
## Set up dataframes for ANOVA stats ##
# We need to create separate dataframes for each ANOVA performed,
# due to the way that the function anova_test() expects data to be passed in.
pathSource <- paste("./ANOVADataframeCreation.R", sep="")
source(pathSource)
## Advice Simulations for Expected Agreement by Chance
pathSource <- paste("./adviceSimulation.R", sep="")
source(pathSource)
pptSimSummaryTable
View(pptSimsRel)
View(pptSimsTask)
mean(pptSimsRel$pAgreeLow)
t.test(mean(pptSimsRel$pAgreeLow), pptSimsRel$actualAgreementLowPre)
pptSimsRel$actualAgreementLowPre
t.test(mean(pptSimsRel$pAgreeLow), pptSimsRel$actualAgreementLowPre)
t.test(0.5, pptSimsRel$actualAgreementLowPre)
t.test(pptSimsRel$actualAgreementLowPre,mu=mean(pptSimsRel$pAgreeLow))
test <- t.test(pptSimsRel$actualAgreementLowPre,mu=mean(pptSimsRel$pAgreeLow))
test$p.value
t.test(pptSimsRel$actualAgreementLowPre,mu=mean(pptSimsRel$pAgreeLow))$p.value
test$p.value
test$statistic
t.test(pptSimsRel$actualAgreementLowPre,pptSimsRel$pAgreeLow)$p.value
t.test(pptSimsRel$actualAgreementLowPre,pptSimsRel$pAgreeLow)$statistic
t.test(pptSimsRel$actualAgreementLowPre,pptSimsRel$pAgreeLow)
####################################################################################################################
### ANOVA Dataframe Creation ###
# Create seperate subsets of the main dataframe for each experiment series
# and each experiment between-subjects manipulation condition.
relFB <- expdataRel[expdataRel$Experiment=="Feedback",] # Experiment 1, Feedback version
relNFB <- expdataRel[expdataRel$Experiment=="NoFeedback",] # Experiment 1, Non-feedback version
diffFB <- expdataDiff[expdataDiff$Experiment=="Feedback",] # Experiment 2, Feedback version
diffNFB <- expdataDiff[expdataDiff$Experiment=="NoFeedback",] # Experiment 2, Non-feedback version
tasksJudge <- expdataTasks[expdataTasks$Condition=="binary",] # Experiment 3, Judgement task version
tasksEst <- expdataTasks[expdataTasks$Condition=="continuous",] # Experiment 3, Estimation task version
## Set up dataframes for ANOVA stats ##
# We need to create separate dataframes for each ANOVA performed,
# due to the way that the function anova_test() expects data to be passed in.
pathSource <- paste("./ANOVADataframeCreation.R", sep="")
source(pathSource)
## Advice Simulations for Expected Agreement by Chance
pathSource <- paste("./adviceSimulation.R", sep="")
source(pathSource)
View(pptSimsTask)
View(pptSimSummaryTable)
View(pptSimSummaryTable)
pptSimSummaryTable
v
exps <- c("Exp 1", "Exp 1", "Exp 1", "Exp 1", "Exp 1", "Exp 1",
"Exp 2", "Exp 2", "Exp 2", "Exp 2",
"Exp 3", "Exp 3", "Exp 3", "Exp 3")
orders <- c(rep(c("preadvice","postadvice"),7))
conds <- c("LowRel","LowRel","MedRel","MedRel","HighRel","HighRel",
"EasyDiff","EasyDiff","HardDiff","HardDiff",
"LowRel","LowRel","HighRel","HighRel")
expAgs <- c(mean(pptSimsRel$pAgreeLow),
mean(pptSimsRel$pAgreeLow),
mean(pptSimsRel$pAgreeMed),
mean(pptSimsRel$pAgreeMed),
mean(pptSimsRel$pAgreeHigh),
mean(pptSimsRel$pAgreeHigh),
mean(pptSimsDiff$pAgreeEasy),
mean(pptSimsDiff$pAgreeEasy),
mean(pptSimsDiff$pAgreeHard),
mean(pptSimsDiff$pAgreeHard),
mean(pptSimsTask$pAgreeLow),
mean(pptSimsTask$pAgreeLow),
mean(pptSimsTask$pAgreeHigh),
mean(pptSimsTask$pAgreeHigh))
obsAgs <- c(mean(pptSimsRel$actualAgreementLowPre),
mean(pptSimsRel$actualAgreementLowPost),
mean(pptSimsRel$actualAgreementMedPre),
mean(pptSimsRel$actualAgreementMedPost),
mean(pptSimsRel$actualAgreementHighPre),
mean(pptSimsRel$actualAgreementHighPost),
mean(pptSimsDiff$actualAgreementEasyPre),
mean(pptSimsDiff$actualAgreementEasyPost),
mean(pptSimsDiff$actualAgreementHardPre),
mean(pptSimsDiff$actualAgreementHardPost),
mean(pptSimsTask$actualAgreementLowPre),
mean(pptSimsTask$actualAgreementLowPost),
mean(pptSimsTask$actualAgreementHighPre),
mean(pptSimsTask$actualAgreementHighPost))
ttestTVals <- c(t.test(pptSimsRel$actualAgreementLowPre,pptSimsRel$pAgreeLow)$statistic,
t.test(pptSimsRel$actualAgreementLowPost,pptSimsRel$pAgreeLow)$statistic,
t.test(pptSimsRel$actualAgreementMedPre,pptSimsRel$pAgreeMed)$statistic,
t.test(pptSimsRel$actualAgreementMedPost,pptSimsRel$pAgreeMed)$statistic,
t.test(pptSimsRel$actualAgreementHighPre,pptSimsRel$pAgreeHigh)$statistic,
t.test(pptSimsRel$actualAgreementHighPost,pptSimsRel$pAgreeHigh)$statistic,
t.test(pptSimsDiff$actualAgreementEasyPre,pptSimsDiff$pAgreeEasy)$statistic,
t.test(pptSimsDiff$actualAgreementEasyPost,pptSimsDiff$pAgreeEasy)$statistic,
t.test(pptSimsDiff$actualAgreementHardPre,pptSimsDiff$pAgreeHard)$statistic,
t.test(pptSimsDiff$actualAgreementHardPost,pptSimsDiff$pAgreeHard)$statistic,
t.test(pptSimsTask$actualAgreementLowPre,pptSimsTask$pAgreeLow)$statistic,
t.test(pptSimsTask$actualAgreementLowPost,pptSimsTask$pAgreeLow)$statistic,
t.test(pptSimsTask$actualAgreementHighPre,pptSimsTask$pAgreeHigh)$statistic,
t.test(pptSimsTask$actualAgreementHighPost,pptSimsTask$pAgreeHigh)$statistic)
ttestPVals <- c(t.test(pptSimsRel$actualAgreementLowPre,pptSimsRel$pAgreeLow)$p.value,
t.test(pptSimsRel$actualAgreementLowPost,pptSimsRel$pAgreeLow)$p.value,
t.test(pptSimsRel$actualAgreementMedPre,pptSimsRel$pAgreeMed)$p.value,
t.test(pptSimsRel$actualAgreementMedPost,pptSimsRel$pAgreeMed)$p.value,
t.test(pptSimsRel$actualAgreementHighPre,pptSimsRel$pAgreeHigh)$p.value,
t.test(pptSimsRel$actualAgreementHighPost,pptSimsRel$pAgreeHigh)$p.value,
t.test(pptSimsDiff$actualAgreementEasyPre,pptSimsDiff$pAgreeEasy)$p.value,
t.test(pptSimsDiff$actualAgreementEasyPost,pptSimsDiff$pAgreeEasy)$p.value,
t.test(pptSimsDiff$actualAgreementHardPre,pptSimsDiff$pAgreeHard)$p.value,
t.test(pptSimsDiff$actualAgreementhardPost,pptSimsDiff$pAgreeHard)$p.value,
t.test(pptSimsTask$actualAgreementLowPre,pptSimsTask$pAgreeLow)$p.value,
t.test(pptSimsTask$actualAgreementLowPost,pptSimsTask$pAgreeLow)$p.value,
t.test(pptSimsTask$actualAgreementHighPre,pptSimsTask$pAgreeHigh)$p.value,
t.test(pptSimsTask$actualAgreementHighPost,pptSimsTask$pAgreeHigh)$p.value)
ttestPVals <- c(t.test(pptSimsRel$actualAgreementLowPre,pptSimsRel$pAgreeLow)$p.value,
t.test(pptSimsRel$actualAgreementLowPost,pptSimsRel$pAgreeLow)$p.value,
t.test(pptSimsRel$actualAgreementMedPre,pptSimsRel$pAgreeMed)$p.value,
t.test(pptSimsRel$actualAgreementMedPost,pptSimsRel$pAgreeMed)$p.value,
t.test(pptSimsRel$actualAgreementHighPre,pptSimsRel$pAgreeHigh)$p.value,
t.test(pptSimsRel$actualAgreementHighPost,pptSimsRel$pAgreeHigh)$p.value,
t.test(pptSimsDiff$actualAgreementEasyPre,pptSimsDiff$pAgreeEasy)$p.value,
t.test(pptSimsDiff$actualAgreementEasyPost,pptSimsDiff$pAgreeEasy)$p.value,
t.test(pptSimsDiff$actualAgreementHardPre,pptSimsDiff$pAgreeHard)$p.value,
t.test(pptSimsDiff$actualAgreementHardPost,pptSimsDiff$pAgreeHard)$p.value,
t.test(pptSimsTask$actualAgreementLowPre,pptSimsTask$pAgreeLow)$p.value,
t.test(pptSimsTask$actualAgreementLowPost,pptSimsTask$pAgreeLow)$p.value,
t.test(pptSimsTask$actualAgreementHighPre,pptSimsTask$pAgreeHigh)$p.value,
t.test(pptSimsTask$actualAgreementHighPost,pptSimsTask$pAgreeHigh)$p.value)
####################################################################################################################
### ANOVA Dataframe Creation ###
# Create seperate subsets of the main dataframe for each experiment series
# and each experiment between-subjects manipulation condition.
relFB <- expdataRel[expdataRel$Experiment=="Feedback",] # Experiment 1, Feedback version
relNFB <- expdataRel[expdataRel$Experiment=="NoFeedback",] # Experiment 1, Non-feedback version
diffFB <- expdataDiff[expdataDiff$Experiment=="Feedback",] # Experiment 2, Feedback version
diffNFB <- expdataDiff[expdataDiff$Experiment=="NoFeedback",] # Experiment 2, Non-feedback version
tasksJudge <- expdataTasks[expdataTasks$Condition=="binary",] # Experiment 3, Judgement task version
tasksEst <- expdataTasks[expdataTasks$Condition=="continuous",] # Experiment 3, Estimation task version
## Set up dataframes for ANOVA stats ##
# We need to create separate dataframes for each ANOVA performed,
# due to the way that the function anova_test() expects data to be passed in.
pathSource <- paste("./ANOVADataframeCreation.R", sep="")
source(pathSource)
## Advice Simulations for Expected Agreement by Chance
pathSource <- paste("./adviceSimulation.R", sep="")
source(pathSource)
pptSimSummaryTable
View(pptSimsTask)
View(pptSimSummaryTable)
t.test(pptSimsRel$actualAgreementLowPre,pptSimsRel$pAgreeLow)
t.test(pptSimsDiff$actualAgreementEasyPre,pptSimsDiff$pAgreeEasy)
exps <- c("Exp 1", "Exp 1", "Exp 1", "Exp 1", "Exp 1", "Exp 1",
"Exp 2", "Exp 2", "Exp 2", "Exp 2",
"Exp 3", "Exp 3", "Exp 3", "Exp 3")
orders <- c(rep(c("preadvice","postadvice"),7))
conds <- c("LowRel","LowRel","MedRel","MedRel","HighRel","HighRel",
"EasyDiff","EasyDiff","HardDiff","HardDiff",
"LowRel","LowRel","HighRel","HighRel")
expAgs <- c(mean(pptSimsRel$pAgreeLow),
mean(pptSimsRel$pAgreeLow),
mean(pptSimsRel$pAgreeMed),
mean(pptSimsRel$pAgreeMed),
mean(pptSimsRel$pAgreeHigh),
mean(pptSimsRel$pAgreeHigh),
mean(pptSimsDiff$pAgreeEasy),
mean(pptSimsDiff$pAgreeEasy),
mean(pptSimsDiff$pAgreeHard),
mean(pptSimsDiff$pAgreeHard),
mean(pptSimsTask$pAgreeLow),
mean(pptSimsTask$pAgreeLow),
mean(pptSimsTask$pAgreeHigh),
mean(pptSimsTask$pAgreeHigh))
obsAgs <- c(mean(pptSimsRel$actualAgreementLowPre),
mean(pptSimsRel$actualAgreementLowPost),
mean(pptSimsRel$actualAgreementMedPre),
mean(pptSimsRel$actualAgreementMedPost),
mean(pptSimsRel$actualAgreementHighPre),
mean(pptSimsRel$actualAgreementHighPost),
mean(pptSimsDiff$actualAgreementEasyPre),
mean(pptSimsDiff$actualAgreementEasyPost),
mean(pptSimsDiff$actualAgreementHardPre),
mean(pptSimsDiff$actualAgreementHardPost),
mean(pptSimsTask$actualAgreementLowPre),
mean(pptSimsTask$actualAgreementLowPost),
mean(pptSimsTask$actualAgreementHighPre),
mean(pptSimsTask$actualAgreementHighPost))
ttestTVals <- c(t.test(pptSimsRel$actualAgreementLowPre,pptSimsRel$pAgreeLow,paired = T)$statistic,
t.test(pptSimsRel$actualAgreementLowPost,pptSimsRel$pAgreeLow,paired = T)$statistic,
t.test(pptSimsRel$actualAgreementMedPre,pptSimsRel$pAgreeMed,paired = T)$statistic,
t.test(pptSimsRel$actualAgreementMedPost,pptSimsRel$pAgreeMed,paired = T)$statistic,
t.test(pptSimsRel$actualAgreementHighPre,pptSimsRel$pAgreeHigh,paired = T)$statistic,
t.test(pptSimsRel$actualAgreementHighPost,pptSimsRel$pAgreeHigh,paired = T)$statistic,
t.test(pptSimsDiff$actualAgreementEasyPre,pptSimsDiff$pAgreeEasy,paired = T)$statistic,
t.test(pptSimsDiff$actualAgreementEasyPost,pptSimsDiff$pAgreeEasy,paired = T)$statistic,
t.test(pptSimsDiff$actualAgreementHardPre,pptSimsDiff$pAgreeHard,paired = T)$statistic,
t.test(pptSimsDiff$actualAgreementHardPost,pptSimsDiff$pAgreeHard,paired = T)$statistic,
t.test(pptSimsTask$actualAgreementLowPre,pptSimsTask$pAgreeLow,paired = T)$statistic,
t.test(pptSimsTask$actualAgreementLowPost,pptSimsTask$pAgreeLow,paired = T)$statistic,
t.test(pptSimsTask$actualAgreementHighPre,pptSimsTask$pAgreeHigh,paired = T)$statistic,
t.test(pptSimsTask$actualAgreementHighPost,pptSimsTask$pAgreeHigh,paired = T)$statistic)
ttestPVals <- c(t.test(pptSimsRel$actualAgreementLowPre,pptSimsRel$pAgreeLow,paired = T)$p.value,
t.test(pptSimsRel$actualAgreementLowPost,pptSimsRel$pAgreeLow,paired = T)$p.value,
t.test(pptSimsRel$actualAgreementMedPre,pptSimsRel$pAgreeMed,paired = T)$p.value,
t.test(pptSimsRel$actualAgreementMedPost,pptSimsRel$pAgreeMed,paired = T)$p.value,
t.test(pptSimsRel$actualAgreementHighPre,pptSimsRel$pAgreeHigh,paired = T)$p.value,
t.test(pptSimsRel$actualAgreementHighPost,pptSimsRel$pAgreeHigh,paired = T)$p.value,
t.test(pptSimsDiff$actualAgreementEasyPre,pptSimsDiff$pAgreeEasy,paired = T)$p.value,
t.test(pptSimsDiff$actualAgreementEasyPost,pptSimsDiff$pAgreeEasy,paired = T)$p.value,
t.test(pptSimsDiff$actualAgreementHardPre,pptSimsDiff$pAgreeHard,paired = T)$p.value,
t.test(pptSimsDiff$actualAgreementHardPost,pptSimsDiff$pAgreeHard,paired = T)$p.value,
t.test(pptSimsTask$actualAgreementLowPre,pptSimsTask$pAgreeLow,paired = T)$p.value,
t.test(pptSimsTask$actualAgreementLowPost,pptSimsTask$pAgreeLow,paired = T)$p.value,
t.test(pptSimsTask$actualAgreementHighPre,pptSimsTask$pAgreeHigh,paired = T)$p.value,
t.test(pptSimsTask$actualAgreementHighPost,pptSimsTask$pAgreeHigh,paired = T)$p.value)
pvals <- c(nrow(pptSimsRel[pptSimsRel$preLowAgreeBootPVal<0.05,]),
nrow(pptSimsRel[pptSimsRel$postLowAgreeBootPVal<0.05,]),
nrow(pptSimsRel[pptSimsRel$preMedAgreeBootPVal<0.05,]),
nrow(pptSimsRel[pptSimsRel$postMedAgreeBootPVal<0.05,]),
nrow(pptSimsRel[pptSimsRel$preHighAgreeBootPVal<0.05,]),
nrow(pptSimsRel[pptSimsRel$postHighAgreeBootPVal<0.05,]),
nrow(pptSimsDiff[pptSimsDiff$preEasyAgreeBootPVal<0.05,]),
nrow(pptSimsDiff[pptSimsDiff$postEasyAgreeBootPVal<0.05,]),
nrow(pptSimsDiff[pptSimsDiff$preHardAgreeBootPVal<0.05,]),
nrow(pptSimsDiff[pptSimsDiff$postHardAgreeBootPVal<0.05,]),
nrow(pptSimsTask[pptSimsTask$preLowAgreeBootPVal<0.05,]),
nrow(pptSimsTask[pptSimsTask$postLowAgreeBootPVal<0.05,]),
nrow(pptSimsTask[pptSimsTask$preHighAgreeBootPVal<0.05,]),
nrow(pptSimsTask[pptSimsTask$postHighAgreeBootPVal<0.05,]))
pptSimSummaryTable <- data.frame(exps,orders,conds,expAgs,obsAgs,ttestTVals,ttestPVals,pvals)
colnames(pptSimSummaryTable) <- c("Experiment","Advice Timing", "Condition", "Expected Agreement", "Observed Agreement",
"T-test T Values", "T-test P Values",
"Num. of Participants with Higher Agreement than Chance (bootstapped p < .05)")
rm(exps,orders,conds,expAgs,obsAgs,ttestTVals,ttestPVals,pvals)
pptSimSummaryTable
pptSimsRel$actualAgreementHighPost,pptSimsRel$pAgreeHigh,paired = T)
t.test(pptSimsRel$actualAgreementHighPost,pptSimsRel$pAgreeHigh,paired = T)
t.test(pptSimsDiff$actualAgreementEasyPre,pptSimsDiff$pAgreeEasy,paired = T)
t.test(pptSimsTask$actualAgreementLowPre,pptSimsTask$pAgreeLow,paired = T)
knitr::opts_chunk$set(echo = TRUE)
part1File <- read.csv("./ENGPart1RAW.csv",header=TRUE,sep=",")
part1File <- as.data.frame(part1File)
part2File <- read.csv("./ENGPart2RAW.csv",header=TRUE,sep=",")
part2File <- as.data.frame(part2File)
#participantIDS <- unique(part2File)
View(part2File)
# Articles:
# Article 1: essential oils
# Article 2: culling cats
# Article 3: dog water
# Article 4: mother's day
# Article 5: NASA aliens
# Article 6: boomerang lawsuit
part1File <- read.csv("./ENGPart1RAW.csv",header=TRUE,sep=",")
part1File <- as.data.frame(part1File)
part2File <- read.csv("./ENGPart2RAW.csv",header=TRUE,sep=",")
part2File <- as.data.frame(part2File)
#participantIDS <- unique(part2File)
View(part2File)
View(part1File)
part1File[,3:]
part1File[-2,]
part1File <- part1File[-2,]
part2File <- part2File[-2,]
View(part2File)
part1File <- read.csv("./ENGPart1RAW.csv",header=TRUE,sep=",")
part1File <- as.data.frame(part1File)
part2File <- read.csv("./ENGPart2RAW.csv",header=TRUE,sep=",")
part2File <- as.data.frame(part2File)
part1File <- part1File[-3,]
part2File <- part2File[-3,]
part1File <- read.csv("./ENGPart1RAW.csv",header=TRUE,sep=",")
part1File <- as.data.frame(part1File)
part2File <- read.csv("./ENGPart2RAW.csv",header=TRUE,sep=",")
part2File <- as.data.frame(part2File)
# Remove first two rows (qualtrics data headers)
part1File <- part1File[-1,]
part2File <- part2File[-1,]
part1File <- part1File[-1,]
part2File <- part2File[-1,]
knitr::opts_chunk$set(echo = TRUE)
participantIDS <- unique(investmentDF$participantID)
participantIDS <- unique(part2File$ParticipantID)
participantIDS
